
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML>
   <HEAD>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   
      <TITLE>Integrated Resource: geometry_schema</TITLE>
   </HEAD>
   <body>
      <h2>Schema: geometry_schema</h2>
      <p><i>Source : ISO 10303-42</i></p><code><br><br><a name="geometry_schema">SCHEMA <b>geometry_schema</b>;</a><br><br></code><code>
         REFERENCE FROM 
         <A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema">representation_schema</A>&nbsp;&nbsp;&nbsp;-- ISO 10303-43<br>&nbsp;&nbsp;(<A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.definitional_representation">definitional_representation</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.founded_item">founded_item</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.functionally_defined_transformation">functionally_defined_transformation</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.item_in_context">item_in_context</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.representation">representation</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.representation_item">representation_item</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.representation_context">representation_context</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.using_representations">using_representations</A>);
         <br><br></code><code>
         REFERENCE FROM 
         <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema">measure_schema</A>&nbsp;&nbsp;&nbsp;-- ISO 10303-41<br>&nbsp;&nbsp;(<A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.global_unit_assigned_context">global_unit_assigned_context</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.plane_angle_measure">plane_angle_measure</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.plane_angle_unit">plane_angle_unit</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_plane_angle_measure">positive_plane_angle_measure</A>);
         <br><br></code><code>
         REFERENCE FROM 
         <A HREF="../../../data/resources/topology_schema/topology_schema.htm#topology_schema">topology_schema</A>&nbsp;&nbsp;&nbsp;-- ISO 10303-42<br>&nbsp;&nbsp;(<A HREF="../../../data/resources/topology_schema/topology_schema.htm#topology_schema.edge_curve">edge_curve</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/topology_schema/topology_schema.htm#topology_schema.face_surface">face_surface</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/topology_schema/topology_schema.htm#topology_schema.poly_loop">poly_loop</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/topology_schema/topology_schema.htm#topology_schema.vertex_point">vertex_point</A>);
         <br><br></code><code>
         REFERENCE FROM 
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema">geometric_model_schema</A>&nbsp;&nbsp;&nbsp;-- ISO 10303-42<br>&nbsp;&nbsp;(<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.block">block</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.boolean_result">boolean_result</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.cyclide_segment_solid">cyclide_segment_solid</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.eccentric_cone">eccentric_cone</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.edge_based_wireframe_model">edge_based_wireframe_model</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.ellipsoid">ellipsoid</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.face_based_surface_model">face_based_surface_model</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.faceted_primitive">faceted_primitive</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.geometric_set">geometric_set</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.half_space_solid">half_space_solid</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.half_space_2d">half_space_2d</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.primitive_2d">primitive_2d</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.rectangular_pyramid">rectangular_pyramid</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.right_angular_wedge">right_angular_wedge</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.right_circular_cone">right_circular_cone</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.right_circular_cylinder">right_circular_cylinder</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.shell_based_surface_model">shell_based_surface_model</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.shell_based_wireframe_model">shell_based_wireframe_model</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.solid_model">solid_model</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.sphere">sphere</A>,<br>
         &nbsp;&nbsp;
         <A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.torus">torus</A>);
         <br><br></code><code><br>CONSTANT<br><A NAME="geometry_schema.dummy_gri"></A>
         &nbsp;&nbsp;dummy_gri : <A HREF="#geometry_schema.geometric_representation_item">geometric_representation_item</A> := representation_item('')||
         geometric_representation_item();
         <br>
         END_CONSTANT;
         <br></code><code><br><A NAME="geometry_schema.axis2_placement">TYPE </A><b>axis2_placement</b> =
         
         
         SELECT<br>
         &nbsp;&nbsp;&nbsp;(<A HREF="#geometry_schema.axis2_placement_2d">axis2_placement_2d</A>, <br>&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.b_spline_curve_form">TYPE </A><b>b_spline_curve_form</b> =
         
         ENUMERATION
         
         OF
         <br>
         &nbsp;&nbsp; 
         (polyline_form,<br>&nbsp;&nbsp;&nbsp;&nbsp;circular_arc,<br>&nbsp;&nbsp;&nbsp;&nbsp;elliptic_arc,<br>&nbsp;&nbsp;&nbsp;&nbsp;parabolic_arc,<br>&nbsp;&nbsp;&nbsp;&nbsp;hyperbolic_arc,<br>&nbsp;&nbsp;&nbsp;&nbsp;unspecified);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.b_spline_surface_form">TYPE </A><b>b_spline_surface_form</b> =
         
         ENUMERATION
         
         OF
         <br>
         &nbsp;&nbsp; 
         (plane_surf,<br>&nbsp;&nbsp;&nbsp;&nbsp;cylindrical_surf,<br>&nbsp;&nbsp;&nbsp;&nbsp;conical_surf,<br>&nbsp;&nbsp;&nbsp;&nbsp;spherical_surf,<br>&nbsp;&nbsp;&nbsp;&nbsp;toroidal_surf,<br>&nbsp;&nbsp;&nbsp;&nbsp;surf_of_revolution,<br>&nbsp;&nbsp;&nbsp;&nbsp;ruled_surf,<br>&nbsp;&nbsp;&nbsp;&nbsp;generalised_cone,<br>&nbsp;&nbsp;&nbsp;&nbsp;quadric_surf,<br>&nbsp;&nbsp;&nbsp;&nbsp;surf_of_linear_extrusion,<br>&nbsp;&nbsp;&nbsp;&nbsp;unspecified);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.curve_on_surface">TYPE </A><b>curve_on_surface</b> =
         
         
         SELECT<br>
         &nbsp;&nbsp;&nbsp;(<A HREF="#geometry_schema.composite_curve_on_surface">composite_curve_on_surface</A>, <br>&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.pcurve">pcurve</A>, <br>&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.surface_curve">surface_curve</A>);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.dimension_count">TYPE </A><b>dimension_count</b> =
         INTEGER;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.dimension_count.wr:wr1">WR1: SELF &gt; 0;</A><br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.extent_enumeration">TYPE </A><b>extent_enumeration</b> =
         
         ENUMERATION
         
         OF
         <br>
         &nbsp;&nbsp; 
         (invalid,<br>&nbsp;&nbsp;&nbsp;&nbsp;zero,<br>&nbsp;&nbsp;&nbsp;&nbsp;finite_non_zero,<br>&nbsp;&nbsp;&nbsp;&nbsp;infinite);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.knot_type">TYPE </A><b>knot_type</b> =
         
         ENUMERATION
         
         OF
         <br>
         &nbsp;&nbsp; 
         (uniform_knots,<br>&nbsp;&nbsp;&nbsp;&nbsp;quasi_uniform_knots,<br>&nbsp;&nbsp;&nbsp;&nbsp;piecewise_bezier_knots,<br>&nbsp;&nbsp;&nbsp;&nbsp;unspecified);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.pcurve_or_surface">TYPE </A><b>pcurve_or_surface</b> =
         
         
         SELECT<br>
         &nbsp;&nbsp;&nbsp;(<A HREF="#geometry_schema.pcurve">pcurve</A>, <br>&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.surface">surface</A>);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.preferred_surface_curve_representation">TYPE </A><b>preferred_surface_curve_representation</b> =
         
         ENUMERATION
         
         OF
         <br>
         &nbsp;&nbsp; 
         (curve_3d,<br>&nbsp;&nbsp;&nbsp;&nbsp;pcurve_s1,<br>&nbsp;&nbsp;&nbsp;&nbsp;pcurve_s2);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.surface_boundary">TYPE </A><b>surface_boundary</b> =
         
         
         SELECT<br>
         &nbsp;&nbsp;&nbsp;(<A HREF="#geometry_schema.boundary_curve">boundary_curve</A>, <br>&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.degenerate_pcurve">degenerate_pcurve</A>);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.transition_code">TYPE </A><b>transition_code</b> =
         
         ENUMERATION
         
         OF
         <br>
         &nbsp;&nbsp; 
         (discontinuous,<br>&nbsp;&nbsp;&nbsp;&nbsp;continuous,<br>&nbsp;&nbsp;&nbsp;&nbsp;cont_same_gradient,<br>&nbsp;&nbsp;&nbsp;&nbsp;cont_same_gradient_same_curvature);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.trimming_preference">TYPE </A><b>trimming_preference</b> =
         
         ENUMERATION
         
         OF
         <br>
         &nbsp;&nbsp; 
         (cartesian,<br>&nbsp;&nbsp;&nbsp;&nbsp;parameter,<br>&nbsp;&nbsp;&nbsp;&nbsp;unspecified);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.trimming_select">TYPE </A><b>trimming_select</b> =
         
         
         SELECT<br>
         &nbsp;&nbsp;&nbsp;(<A HREF="#geometry_schema.cartesian_point">cartesian_point</A>, <br>&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.vector_or_direction">TYPE </A><b>vector_or_direction</b> =
         
         
         SELECT<br>
         &nbsp;&nbsp;&nbsp;(<A HREF="#geometry_schema.direction">direction</A>, <br>&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.vector">vector</A>);<br>
         END_TYPE; 
         <br></code><code><br><A NAME="geometry_schema.axis1_placement">ENTITY <b>axis1_placement</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.placement">placement</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis1_placement.axis">axis : </A>
         OPTIONAL 
         <A HREF="#geometry_schema.direction">direction</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis1_placement.z">z : </A><A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A> := NVL(normalise(axis), dummy_gri ||
         direction([0.0,0.0,1.0]));<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis1_placement.wr:wr1">WR1: SELF\geometric_representation_item.dim  = 3;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.axis2_placement_2d">ENTITY <b>axis2_placement_2d</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.placement">placement</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis2_placement_2d.ref_direction">ref_direction : </A>
         OPTIONAL 
         <A HREF="#geometry_schema.direction">direction</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis2_placement_2d.p">p : </A>LIST[2:2] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A> := build_2axes(ref_direction);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis2_placement_2d.wr:wr1">WR1: SELF\geometric_representation_item.dim = 2;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.axis2_placement_3d">ENTITY <b>axis2_placement_3d</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.placement">placement</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis2_placement_3d.axis">axis : </A>
         OPTIONAL 
         <A HREF="#geometry_schema.direction">direction</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis2_placement_3d.ref_direction">ref_direction : </A>
         OPTIONAL 
         <A HREF="#geometry_schema.direction">direction</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis2_placement_3d.p">p : </A>LIST[3:3] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A> := build_axes(axis,ref_direction);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis2_placement_3d.wr:wr1">WR1: SELF\placement.location.dim = 3;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis2_placement_3d.wr:wr2">WR2: (NOT (EXISTS (axis))) OR (axis.dim = 3);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis2_placement_3d.wr:wr3">WR3: (NOT (EXISTS (ref_direction))) OR (ref_direction.dim = 3);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.axis2_placement_3d.wr:wr4">WR4: (NOT (EXISTS (axis))) OR (NOT (EXISTS (ref_direction))) OR
            (cross_product(axis,ref_direction).magnitude &gt; 0.0);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.b_spline_curve">ENTITY <b>b_spline_curve</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.uniform_curve">uniform_curve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.b_spline_curve_with_knots">b_spline_curve_with_knots</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.quasi_uniform_curve">quasi_uniform_curve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.bezier_curve">bezier_curve</A>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ANDOR&nbsp;<A HREF="#geometry_schema.rational_b_spline_curve">rational_b_spline_curve</A>)<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.bounded_curve">bounded_curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve.degree">degree : </A>INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve.control_points_list">control_points_list : </A>LIST[2:?] OF <A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve.curve_form">curve_form : </A><A HREF="#geometry_schema.b_spline_curve_form">b_spline_curve_form</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve.closed_curve">closed_curve : </A>LOGICAL;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve.self_intersect">self_intersect : </A>LOGICAL;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve.upper_index_on_control_points">upper_index_on_control_points : </A>INTEGER := (SIZEOF(control_points_list) - 1);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve.control_points">control_points : </A>ARRAY[0:0] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A> := list_to_array(control_points_list,0,
         upper_index_on_control_points);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve.wr:wr1">WR1: ('GEOMETRY_SCHEMA.UNIFORM_CURVE' IN TYPEOF(self)) OR
            ('GEOMETRY_SCHEMA.QUASI_UNIFORM_CURVE' IN TYPEOF(self)) OR
            ('GEOMETRY_SCHEMA.BEZIER_CURVE' IN TYPEOF(self)) OR
            ('GEOMETRY_SCHEMA.B_SPLINE_CURVE_WITH_KNOTS' IN TYPEOF(self));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.b_spline_curve_with_knots">ENTITY <b>b_spline_curve_with_knots</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_curve">b_spline_curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve_with_knots.knot_multiplicities">knot_multiplicities : </A>LIST[2:?] OF INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve_with_knots.knots">knots : </A>LIST[2:?] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve_with_knots.knot_spec">knot_spec : </A><A HREF="#geometry_schema.knot_type">knot_type</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve_with_knots.upper_index_on_knots">upper_index_on_knots : </A>INTEGER := SIZEOF(knots);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve_with_knots.wr:wr1">WR1: constraints_param_b_spline(degree, upper_index_on_knots,
            upper_index_on_control_points,
            knot_multiplicities, knots);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_curve_with_knots.wr:wr2">WR2: SIZEOF(knot_multiplicities) = upper_index_on_knots;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.b_spline_surface">ENTITY <b>b_spline_surface</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.b_spline_surface_with_knots">b_spline_surface_with_knots</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.uniform_surface">uniform_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.quasi_uniform_surface">quasi_uniform_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.bezier_surface">bezier_surface</A>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ANDOR&nbsp;<A HREF="#geometry_schema.rational_b_spline_surface">rational_b_spline_surface</A>)<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.bounded_surface">bounded_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.u_degree">u_degree : </A>INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.v_degree">v_degree : </A>INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.control_points_list">control_points_list : </A>LIST[2:?] OF LIST[2:?] OF <A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.surface_form">surface_form : </A><A HREF="#geometry_schema.b_spline_surface_form">b_spline_surface_form</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.u_closed">u_closed : </A>LOGICAL;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.v_closed">v_closed : </A>LOGICAL;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.self_intersect">self_intersect : </A>LOGICAL;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.u_upper">u_upper : </A>INTEGER := SIZEOF(control_points_list) - 1;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.v_upper">v_upper : </A>INTEGER := SIZEOF(control_points_list[1]) - 1;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.control_points">control_points : </A>ARRAY[0:0] OF ARRAY[0:0] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A> := make_array_of_array(control_points_list,
         0,u_upper,0,v_upper);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface.wr:wr1">WR1: ('GEOMETRY_SCHEMA.UNIFORM_SURFACE' IN TYPEOF(SELF)) OR
            ('GEOMETRY_SCHEMA.QUASI_UNIFORM_SURFACE' IN TYPEOF(SELF)) OR
            ('GEOMETRY_SCHEMA.BEZIER_SURFACE' IN TYPEOF(SELF)) OR
            ('GEOMETRY_SCHEMA.B_SPLINE_SURFACE_WITH_KNOTS' IN TYPEOF(SELF));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.b_spline_surface_with_knots">ENTITY <b>b_spline_surface_with_knots</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_surface">b_spline_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.u_multiplicities">u_multiplicities : </A>LIST[2:?] OF INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.v_multiplicities">v_multiplicities : </A>LIST[2:?] OF INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.u_knots">u_knots : </A>LIST[2:?] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.v_knots">v_knots : </A>LIST[2:?] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.knot_spec">knot_spec : </A><A HREF="#geometry_schema.knot_type">knot_type</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.knot_u_upper">knot_u_upper : </A>INTEGER := SIZEOF(u_knots);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.knot_v_upper">knot_v_upper : </A>INTEGER := SIZEOF(v_knots);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.wr:wr1">WR1: constraints_param_b_spline(SELF\b_spline_surface.u_degree,
            knot_u_upper, SELF\b_spline_surface.u_upper,
            u_multiplicities, u_knots);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.wr:wr2">WR2: constraints_param_b_spline(SELF\b_spline_surface.v_degree,
            knot_v_upper, SELF\b_spline_surface.v_upper,
            v_multiplicities, v_knots);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.wr:wr3">WR3: SIZEOF(u_multiplicities) = knot_u_upper;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_surface_with_knots.wr:wr4">WR4: SIZEOF(v_multiplicities) = knot_v_upper;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.b_spline_volume">ENTITY <b>b_spline_volume</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.b_spline_volume_with_knots">b_spline_volume_with_knots</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.uniform_volume">uniform_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.quasi_uniform_volume">quasi_uniform_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.bezier_volume">bezier_volume</A>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ANDOR&nbsp;<A HREF="#geometry_schema.rational_b_spline_volume">rational_b_spline_volume</A>)<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume.u_degree">u_degree : </A>INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume.v_degree">v_degree : </A>INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume.w_degree">w_degree : </A>INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume.control_points_list">control_points_list : </A>LIST[2:?] OF LIST[2:?] OF LIST[2:?] OF <A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume.u_upper">u_upper : </A>INTEGER := SIZEOF(control_points_list) - 1;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume.v_upper">v_upper : </A>INTEGER := SIZEOF(control_points_list[1]) - 1;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume.w_upper">w_upper : </A>INTEGER := SIZEOF(control_points_list[1][1]) - 1;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume.control_points">control_points : </A>ARRAY[0:0] OF ARRAY[0:0] OF ARRAY[0:0] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A> := make_array_of_array_of_array (control_points_list,
         0,u_upper,0,v_upper,
         0,w_upper );<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume.wr:wr1">WR1: ('GEOMETRY_SCHEMA.BEZIER_VOLUME' IN TYPEOF(SELF)) OR
            ('GEOMETRY_SCHEMA.UNIFORM_VOLUME' IN TYPEOF(SELF)) OR
            ('GEOMETRY_SCHEMA.QUASI_UNIFORM_VOLUME' IN TYPEOF(SELF)) OR
            ('GEOMETRY_SCHEMA.B_SPLINE_VOLUME_WITH_KNOTS' IN TYPEOF(SELF));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.b_spline_volume_with_knots">ENTITY <b>b_spline_volume_with_knots</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_volume">b_spline_volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.u_multiplicities">u_multiplicities : </A>LIST[2:?] OF INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.v_multiplicities">v_multiplicities : </A>LIST[2:?] OF INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.w_multiplicities">w_multiplicities : </A>LIST[2:?] OF INTEGER;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.u_knots">u_knots : </A>LIST[2:?] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.v_knots">v_knots : </A>LIST[2:?] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.w_knots">w_knots : </A>LIST[2:?] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.knot_u_upper">knot_u_upper : </A>INTEGER := SIZEOF(u_knots);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.knot_v_upper">knot_v_upper : </A>INTEGER := SIZEOF(v_knots);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.knot_w_upper">knot_w_upper : </A>INTEGER := SIZEOF(w_knots);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.wr:wr1">WR1: constraints_param_b_spline(SELF\b_spline_volume.u_degree,
            knot_u_upper, SELF\b_spline_volume.u_upper,
            u_multiplicities, u_knots);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.wr:wr2">WR2: constraints_param_b_spline(SELF\b_spline_volume.v_degree,
            knot_v_upper, SELF\b_spline_volume.v_upper,
            v_multiplicities, v_knots);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.wr:wr3">WR3: constraints_param_b_spline(SELF\b_spline_volume.w_degree,
            knot_w_upper, SELF\b_spline_volume.w_upper,
            w_multiplicities, w_knots);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.wr:wr4">WR4: SIZEOF(u_multiplicities) = knot_u_upper;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.wr:wr5">WR5: SIZEOF(v_multiplicities) = knot_v_upper;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.b_spline_volume_with_knots.wr:wr6">WR6: SIZEOF(w_multiplicities) = knot_w_upper;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.bezier_curve">ENTITY <b>bezier_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_curve">b_spline_curve</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.bezier_surface">ENTITY <b>bezier_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_surface">b_spline_surface</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.bezier_volume">ENTITY <b>bezier_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_volume">b_spline_volume</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.block_volume">ENTITY <b>block_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.block_volume.position">position : </A><A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.block_volume.x">x : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.block_volume.y">y : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.block_volume.z">z : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.boundary_curve">ENTITY <b>boundary_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.composite_curve_on_surface">composite_curve_on_surface</A>);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.boundary_curve.wr:wr1">WR1: SELF\composite_curve.closed_curve;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.bounded_curve">ENTITY <b>bounded_curve</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.polyline">polyline</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.b_spline_curve">b_spline_curve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.trimmed_curve">trimmed_curve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.bounded_pcurve">bounded_pcurve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.bounded_surface_curve">bounded_surface_curve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.composite_curve">composite_curve</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.curve">curve</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.bounded_pcurve">ENTITY <b>bounded_pcurve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.bounded_curve">bounded_curve</A>, <A HREF="#geometry_schema.pcurve">pcurve</A>);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.bounded_pcurve.wr:wr1">WR1: ('GEOMETRY_SCHEMA.BOUNDED_CURVE' IN
            TYPEOF(SELF\pcurve.reference_to_curve.items[1]));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.bounded_surface">ENTITY <b>bounded_surface</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.b_spline_surface">b_spline_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.rectangular_trimmed_surface">rectangular_trimmed_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.curve_bounded_surface">curve_bounded_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.rectangular_composite_surface">rectangular_composite_surface</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.surface">surface</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.bounded_surface_curve">ENTITY <b>bounded_surface_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.bounded_curve">bounded_curve</A>, <A HREF="#geometry_schema.surface_curve">surface_curve</A>);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.bounded_surface_curve.wr:wr1">WR1: ('GEOMETRY_SCHEMA.BOUNDED_CURVE' IN
            TYPEOF(SELF\surface_curve.curve_3d));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.cartesian_point">ENTITY <b>cartesian_point</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.cylindrical_point">cylindrical_point</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.polar_point">polar_point</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.spherical_point">spherical_point</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.point">point</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_point.coordinates">coordinates : </A>LIST[1:3] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.cartesian_transformation_operator">ENTITY <b>cartesian_transformation_operator</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.cartesian_transformation_operator_2d">cartesian_transformation_operator_2d</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.cartesian_transformation_operator_3d">cartesian_transformation_operator_3d</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.functionally_defined_transformation">functionally_defined_transformation</A>, <A HREF="#geometry_schema.geometric_representation_item">geometric_representation_item</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator.axis1">axis1 : </A>
         OPTIONAL 
         <A HREF="#geometry_schema.direction">direction</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator.axis2">axis2 : </A>
         OPTIONAL 
         <A HREF="#geometry_schema.direction">direction</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator.local_origin">local_origin : </A><A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator.scale">scale : </A>
         OPTIONAL 
         REAL;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator.scl">scl : </A>REAL := NVL(scale, 1.0);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator.wr:wr1">WR1: scl &gt; 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.cartesian_transformation_operator_2d">ENTITY <b>cartesian_transformation_operator_2d</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.cartesian_transformation_operator">cartesian_transformation_operator</A>);<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator_2d.u">u : </A>LIST[2:2] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A> := base_axis(2,SELF\cartesian_transformation_operator.axis1,
         SELF\cartesian_transformation_operator.axis2,?);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator_2d.wr:wr1">WR1: SELF\geometric_representation_item.dim = 2;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.cartesian_transformation_operator_3d">ENTITY <b>cartesian_transformation_operator_3d</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.cartesian_transformation_operator">cartesian_transformation_operator</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator_3d.axis3">axis3 : </A>
         OPTIONAL 
         <A HREF="#geometry_schema.direction">direction</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator_3d.u">u : </A>LIST[3:3] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A> := base_axis(3,SELF\cartesian_transformation_operator.axis1,
         SELF\cartesian_transformation_operator.axis2,axis3);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cartesian_transformation_operator_3d.wr:wr1">WR1: SELF\geometric_representation_item.dim = 3;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.circle">ENTITY <b>circle</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.conic">conic</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.circle.radius">radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.circular_involute">ENTITY <b>circular_involute</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.curve">curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.circular_involute.position">position : </A><A HREF="#geometry_schema.axis2_placement">axis2_placement</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.circular_involute.base_radius">base_radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.clothoid">ENTITY <b>clothoid</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.curve">curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.clothoid.position">position : </A><A HREF="#geometry_schema.axis2_placement">axis2_placement</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.clothoid.clothoid_constant">clothoid_constant : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.composite_curve">ENTITY <b>composite_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.bounded_curve">bounded_curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve.segments">segments : </A>LIST[1:?] OF <A HREF="#geometry_schema.composite_curve_segment">composite_curve_segment</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve.self_intersect">self_intersect : </A>LOGICAL;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve.n_segments">n_segments : </A>INTEGER := SIZEOF(segments);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve.closed_curve">closed_curve : </A>LOGICAL := segments[n_segments].transition &lt;&gt; discontinuous;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve.wr:wr1">WR1: ((NOT closed_curve) AND (SIZEOF(QUERY(temp &lt;* segments |
            temp.transition = discontinuous)) = 1)) OR
            ((closed_curve) AND (SIZEOF(QUERY(temp &lt;* segments | 
            temp.transition = discontinuous)) = 0));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.composite_curve_on_surface">ENTITY <b>composite_curve_on_surface</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (<A HREF="#geometry_schema.boundary_curve">boundary_curve</A>)<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.composite_curve">composite_curve</A>);<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve_on_surface.basis_surface">basis_surface : </A>SET[0:2] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.surface">surface</A> := get_basis_surface(SELF);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve_on_surface.wr:wr1">WR1: SIZEOF(basis_surface) &gt; 0;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve_on_surface.wr:wr2">WR2: constraints_composite_curve_on_surface(SELF);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.composite_curve_segment">ENTITY <b>composite_curve_segment</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.founded_item">founded_item</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve_segment.transition">transition : </A><A HREF="#geometry_schema.transition_code">transition_code</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve_segment.same_sense">same_sense : </A>BOOLEAN;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve_segment.parent_curve">parent_curve : </A><A HREF="#geometry_schema.curve">curve</A>;<br>INVERSE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve_segment.using_curves">using_curves : </A>BAG[1:?] OF <A HREF="#geometry_schema.composite_curve">composite_curve</A> FOR segments;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.composite_curve_segment.wr:wr1">WR1: ('GEOMETRY_SCHEMA.BOUNDED_CURVE' IN TYPEOF(parent_curve));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.conic">ENTITY <b>conic</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.circle">circle</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.ellipse">ellipse</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.hyperbola">hyperbola</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.parabola">parabola</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.curve">curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.conic.position">position : </A><A HREF="#geometry_schema.axis2_placement">axis2_placement</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.conical_surface">ENTITY <b>conical_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.elementary_surface">elementary_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.conical_surface.radius">radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.conical_surface.semi_angle">semi_angle : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.plane_angle_measure">plane_angle_measure</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.conical_surface.wr:wr1">WR1: radius &gt;= 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.curve">ENTITY <b>curve</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.line">line</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.conic">conic</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.clothoid">clothoid</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.circular_involute">circular_involute</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.pcurve">pcurve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.surface_curve">surface_curve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.offset_curve_2d">offset_curve_2d</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.offset_curve_3d">offset_curve_3d</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.curve_replica">curve_replica</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.geometric_representation_item">geometric_representation_item</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.curve_bounded_surface">ENTITY <b>curve_bounded_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.bounded_surface">bounded_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_bounded_surface.basis_surface">basis_surface : </A><A HREF="#geometry_schema.surface">surface</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_bounded_surface.boundaries">boundaries : </A>SET[1:?] OF <A HREF="#geometry_schema.boundary_curve">boundary_curve</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_bounded_surface.implicit_outer">implicit_outer : </A>BOOLEAN;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_bounded_surface.wr:wr1">WR1: (NOT implicit_outer) OR
            (SIZEOF (QUERY (temp &lt;* boundaries |
            'GEOMETRY_SCHEMA.OUTER_BOUNDARY_CURVE' IN TYPEOF(temp))) = 0);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_bounded_surface.wr:wr2">WR2: (NOT(implicit_outer)) OR
            ('GEOMETRY_SCHEMA.BOUNDED_SURFACE' IN TYPEOF(basis_surface));</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_bounded_surface.wr:wr3">WR3: SIZEOF(QUERY(temp &lt;* boundaries |
            'GEOMETRY_SCHEMA.OUTER_BOUNDARY_CURVE' IN
            TYPEOF(temp))) &lt;= 1;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_bounded_surface.wr:wr4">WR4: SIZEOF(QUERY(temp &lt;* boundaries |
            (temp\composite_curve_on_surface.basis_surface [1] &lt;&gt;
            SELF.basis_surface))) = 0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.curve_replica">ENTITY <b>curve_replica</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.curve">curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_replica.parent_curve">parent_curve : </A><A HREF="#geometry_schema.curve">curve</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_replica.transformation">transformation : </A><A HREF="#geometry_schema.cartesian_transformation_operator">cartesian_transformation_operator</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_replica.wr:wr1">WR1: transformation.dim = parent_curve.dim;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.curve_replica.wr:wr2">WR2: acyclic_curve_replica (SELF, parent_curve);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.cylindrical_point">ENTITY <b>cylindrical_point</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.cartesian_point">cartesian_point</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cylindrical_point.r">r : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cylindrical_point.theta">theta : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.plane_angle_measure">plane_angle_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cylindrical_point.z">z : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>DERIVE<br>
         &nbsp;&nbsp;SELF\<A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A>.<A NAME="geometry_schema.cylindrical_point.coordinates">coordinates : </A>LIST[1:3] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A> := [r*cos(theta), r*sin(theta), z];<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cylindrical_point.wr:wr1">WR1: r &gt;= 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.cylindrical_surface">ENTITY <b>cylindrical_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.elementary_surface">elementary_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cylindrical_surface.radius">radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.cylindrical_volume">ENTITY <b>cylindrical_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cylindrical_volume.position">position : </A><A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cylindrical_volume.radius">radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.cylindrical_volume.height">height : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.degenerate_pcurve">ENTITY <b>degenerate_pcurve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.point">point</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.degenerate_pcurve.basis_surface">basis_surface : </A><A HREF="#geometry_schema.surface">surface</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.degenerate_pcurve.reference_to_curve">reference_to_curve : </A><A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.definitional_representation">definitional_representation</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.degenerate_pcurve.wr:wr1">WR1: SIZEOF(reference_to_curve\representation.items) = 1;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.degenerate_pcurve.wr:wr2">WR2: 'GEOMETRY_SCHEMA.CURVE' IN TYPEOF
            (reference_to_curve\representation.items[1]);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.degenerate_pcurve.wr:wr3">WR3: reference_to_curve\representation.
            items[1]\geometric_representation_item.dim =2;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.degenerate_toroidal_surface">ENTITY <b>degenerate_toroidal_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.toroidal_surface">toroidal_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.degenerate_toroidal_surface.select_outer">select_outer : </A>BOOLEAN;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.degenerate_toroidal_surface.wr:wr1">WR1: major_radius &lt;   minor_radius;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.direction">ENTITY <b>direction</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.geometric_representation_item">geometric_representation_item</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.direction.direction_ratios">direction_ratios : </A>LIST[2:3] OF REAL;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.direction.wr:wr1">WR1: SIZEOF(QUERY(tmp &lt;* direction_ratios | tmp &lt;&gt; 0.0)) &gt; 0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.dupin_cyclide_surface">ENTITY <b>dupin_cyclide_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.elementary_surface">elementary_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.dupin_cyclide_surface.generalised_major_radius">generalised_major_radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.dupin_cyclide_surface.generalised_minor_radius">generalised_minor_radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.dupin_cyclide_surface.skewness">skewness : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.dupin_cyclide_surface.wr:wr1">WR1: skewness &gt;= 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.eccentric_conical_volume">ENTITY <b>eccentric_conical_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.eccentric_conical_volume.position">position : </A><A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.eccentric_conical_volume.semi_axis_1">semi_axis_1 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.eccentric_conical_volume.semi_axis_2">semi_axis_2 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.eccentric_conical_volume.height">height : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.eccentric_conical_volume.x_offset">x_offset : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.eccentric_conical_volume.y_offset">y_offset : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.eccentric_conical_volume.ratio">ratio : </A>REAL;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.eccentric_conical_volume.wr:wr1">WR1: ratio &gt;= 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.elementary_surface">ENTITY <b>elementary_surface</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.plane">plane</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.cylindrical_surface">cylindrical_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.conical_surface">conical_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.spherical_surface">spherical_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.toroidal_surface">toroidal_surface</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.surface">surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.elementary_surface.position">position : </A><A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.ellipse">ENTITY <b>ellipse</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.conic">conic</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.ellipse.semi_axis_1">semi_axis_1 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.ellipse.semi_axis_2">semi_axis_2 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.ellipsoid_volume">ENTITY <b>ellipsoid_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.ellipsoid_volume.position">position : </A><A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.ellipsoid_volume.semi_axis_1">semi_axis_1 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.ellipsoid_volume.semi_axis_2">semi_axis_2 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.ellipsoid_volume.semi_axis_3">semi_axis_3 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.evaluated_degenerate_pcurve">ENTITY <b>evaluated_degenerate_pcurve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.degenerate_pcurve">degenerate_pcurve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.evaluated_degenerate_pcurve.equivalent_point">equivalent_point : </A><A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.fixed_reference_swept_surface">ENTITY <b>fixed_reference_swept_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.swept_surface">swept_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.fixed_reference_swept_surface.directrix">directrix : </A><A HREF="#geometry_schema.curve">curve</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.fixed_reference_swept_surface.fixed_reference">fixed_reference : </A><A HREF="#geometry_schema.direction">direction</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.geometric_representation_context">ENTITY <b>geometric_representation_context</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.representation_context">representation_context</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.geometric_representation_context.coordinate_space_dimension">coordinate_space_dimension : </A><A HREF="#geometry_schema.dimension_count">dimension_count</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.geometric_representation_item">ENTITY <b>geometric_representation_item</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.point">point</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.direction">direction</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.vector">vector</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.placement">placement</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.cartesian_transformation_operator">cartesian_transformation_operator</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.curve">curve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.surface">surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/topology_schema/topology_schema.htm#topology_schema.edge_curve">edge_curve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/topology_schema/topology_schema.htm#topology_schema.face_surface">face_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/topology_schema/topology_schema.htm#topology_schema.poly_loop">poly_loop</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/topology_schema/topology_schema.htm#topology_schema.vertex_point">vertex_point</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.solid_model">solid_model</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.boolean_result">boolean_result</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.sphere">sphere</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.right_circular_cone">right_circular_cone</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.right_circular_cylinder">right_circular_cylinder</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.torus">torus</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.block">block</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.primitive_2d">primitive_2d</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.right_angular_wedge">right_angular_wedge</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.ellipsoid">ellipsoid</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.faceted_primitive">faceted_primitive</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.rectangular_pyramid">rectangular_pyramid</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.cyclide_segment_solid">cyclide_segment_solid</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.volume">volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.half_space_solid">half_space_solid</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.half_space_2d">half_space_2d</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.shell_based_surface_model">shell_based_surface_model</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.face_based_surface_model">face_based_surface_model</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.shell_based_wireframe_model">shell_based_wireframe_model</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.edge_based_wireframe_model">edge_based_wireframe_model</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="../../../data/resources/geometric_model_schema/geometric_model_schema.htm#geometric_model_schema.geometric_set">geometric_set</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.representation_item">representation_item</A>);<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.geometric_representation_item.dim">dim : </A><A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.dimension_count">dimension_count</A> := dimension_of(SELF);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.geometric_representation_item.wr:wr1">WR1: SIZEOF (QUERY (using_rep &lt;* using_representations (SELF) |
            NOT ('GEOMETRY_SCHEMA.GEOMETRIC_REPRESENTATION_CONTEXT' IN
            TYPEOF (using_rep.context_of_items)))) = 0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.hexahedron_volume">ENTITY <b>hexahedron_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.points">points : </A>LIST[8:8] OF <A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr1">WR1: above_plane(points[1], points[2], points[3], points[4]) = 0.0;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr2">WR2: above_plane(points[5], points[8], points[7], points[6]) = 0.0;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr3">WR3: above_plane(points[1], points[4], points[8], points[5]) = 0.0;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr4">WR4: above_plane(points[4], points[3], points[7], points[8]) = 0.0;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr5">WR5: above_plane(points[3], points[2], points[6], points[7]) = 0.0;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr6">WR6: above_plane(points[1], points[5], points[6], points[2]) = 0.0;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr7">WR7: same_side([points[1], points[2], points[3]],
            [points[5], points[6], points[7], points[8]]);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr8">WR8: same_side([points[1], points[4], points[8]],
            [points[3], points[7], points[6], points[2]]);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr9">WR9: same_side([points[1], points[2], points[5]],
            [points[3], points[7], points[8], points[4]]);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr10">WR10: same_side([points[5], points[6], points[7]],
            [points[1], points[2], points[3], points[4]]);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr11">WR11: same_side([points[3], points[7], points[6]],
            [points[1], points[4], points[8], points[5]]);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr12">WR12: same_side([points[3], points[7], points[8]],
            [points[1], points[5], points[6], points[2]]);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hexahedron_volume.wr:wr13">WR13: points[1].dim = 3;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.hyperbola">ENTITY <b>hyperbola</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.conic">conic</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hyperbola.semi_axis">semi_axis : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.hyperbola.semi_imag_axis">semi_imag_axis : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.intersection_curve">ENTITY <b>intersection_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.surface_curve">surface_curve</A>);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.intersection_curve.wr:wr1">WR1: SIZEOF(SELF\surface_curve.associated_geometry) = 2;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.intersection_curve.wr:wr2">WR2: associated_surface(SELF\surface_curve.associated_geometry[1]) &lt;&gt;
            associated_surface(SELF\surface_curve.associated_geometry[2]);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.line">ENTITY <b>line</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.curve">curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.line.pnt">pnt : </A><A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.line.dir">dir : </A><A HREF="#geometry_schema.vector">vector</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.line.wr:wr1">WR1: dir.dim  = pnt.dim;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.offset_curve_2d">ENTITY <b>offset_curve_2d</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.curve">curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_curve_2d.basis_curve">basis_curve : </A><A HREF="#geometry_schema.curve">curve</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_curve_2d.distance">distance : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_curve_2d.self_intersect">self_intersect : </A>LOGICAL;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_curve_2d.wr:wr1">WR1: basis_curve.dim = 2;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.offset_curve_3d">ENTITY <b>offset_curve_3d</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.curve">curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_curve_3d.basis_curve">basis_curve : </A><A HREF="#geometry_schema.curve">curve</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_curve_3d.distance">distance : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_curve_3d.self_intersect">self_intersect : </A>LOGICAL;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_curve_3d.ref_direction">ref_direction : </A><A HREF="#geometry_schema.direction">direction</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_curve_3d.wr:wr1">WR1: (basis_curve.dim = 3) AND (ref_direction.dim = 3);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.offset_surface">ENTITY <b>offset_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.surface">surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_surface.basis_surface">basis_surface : </A><A HREF="#geometry_schema.surface">surface</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_surface.distance">distance : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.offset_surface.self_intersect">self_intersect : </A>LOGICAL;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.oriented_surface">ENTITY <b>oriented_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.surface">surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.oriented_surface.orientation">orientation : </A>BOOLEAN;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.outer_boundary_curve">ENTITY <b>outer_boundary_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.boundary_curve">boundary_curve</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.parabola">ENTITY <b>parabola</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.conic">conic</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.parabola.focal_dist">focal_dist : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.parabola.wr:wr1">WR1: focal_dist &lt;&gt; 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.pcurve">ENTITY <b>pcurve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.curve">curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.pcurve.basis_surface">basis_surface : </A><A HREF="#geometry_schema.surface">surface</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.pcurve.reference_to_curve">reference_to_curve : </A><A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.definitional_representation">definitional_representation</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.pcurve.wr:wr1">WR1: SIZEOF(reference_to_curve\representation.items) = 1;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.pcurve.wr:wr2">WR2: 'GEOMETRY_SCHEMA.CURVE' IN TYPEOF
            (reference_to_curve\representation.items[1]);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.pcurve.wr:wr3">WR3: reference_to_curve\representation.items[1]\
            geometric_representation_item.dim =2;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.placement">ENTITY <b>placement</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.axis1_placement">axis1_placement</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.axis2_placement_2d">axis2_placement_2d</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.geometric_representation_item">geometric_representation_item</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.placement.location">location : </A><A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.plane">ENTITY <b>plane</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.elementary_surface">elementary_surface</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.point">ENTITY <b>point</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.cartesian_point">cartesian_point</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.point_on_curve">point_on_curve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.point_on_surface">point_on_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.point_in_volume">point_in_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.point_replica">point_replica</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.degenerate_pcurve">degenerate_pcurve</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.geometric_representation_item">geometric_representation_item</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.point_in_volume">ENTITY <b>point_in_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.point">point</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_in_volume.basis_volume">basis_volume : </A><A HREF="#geometry_schema.volume">volume</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_in_volume.point_parameter_u">point_parameter_u : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_in_volume.point_parameter_v">point_parameter_v : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_in_volume.point_parameter_w">point_parameter_w : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.point_on_curve">ENTITY <b>point_on_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.point">point</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_on_curve.basis_curve">basis_curve : </A><A HREF="#geometry_schema.curve">curve</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_on_curve.point_parameter">point_parameter : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.point_on_surface">ENTITY <b>point_on_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.point">point</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_on_surface.basis_surface">basis_surface : </A><A HREF="#geometry_schema.surface">surface</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_on_surface.point_parameter_u">point_parameter_u : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_on_surface.point_parameter_v">point_parameter_v : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.point_replica">ENTITY <b>point_replica</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.point">point</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_replica.parent_pt">parent_pt : </A><A HREF="#geometry_schema.point">point</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_replica.transformation">transformation : </A><A HREF="#geometry_schema.cartesian_transformation_operator">cartesian_transformation_operator</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_replica.wr:wr1">WR1: transformation.dim = parent_pt.dim;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.point_replica.wr:wr2">WR2: acyclic_point_replica (SELF,parent_pt);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.polar_point">ENTITY <b>polar_point</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.cartesian_point">cartesian_point</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.polar_point.r">r : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.polar_point.theta">theta : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.plane_angle_measure">plane_angle_measure</A>;<br>DERIVE<br>
         &nbsp;&nbsp;SELF\<A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A>.<A NAME="geometry_schema.polar_point.coordinates">coordinates : </A>LIST[1:3] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A> := [r*cos(theta), r*sin(theta)];<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.polar_point.wr:wr1">WR1: r &gt;= 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.polyline">ENTITY <b>polyline</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.bounded_curve">bounded_curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.polyline.points">points : </A>LIST[2:?] OF <A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.pyramid_volume">ENTITY <b>pyramid_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.pyramid_volume.position">position : </A><A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.pyramid_volume.xlength">xlength : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.pyramid_volume.ylength">ylength : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.pyramid_volume.height">height : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.quasi_uniform_curve">ENTITY <b>quasi_uniform_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_curve">b_spline_curve</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.quasi_uniform_surface">ENTITY <b>quasi_uniform_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_surface">b_spline_surface</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.quasi_uniform_volume">ENTITY <b>quasi_uniform_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_volume">b_spline_volume</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.rational_b_spline_curve">ENTITY <b>rational_b_spline_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_curve">b_spline_curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_curve.weights_data">weights_data : </A>LIST[2:?] OF REAL;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_curve.weights">weights : </A>ARRAY[0:0] OF REAL := list_to_array(weights_data,0,
         upper_index_on_control_points);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_curve.wr:wr1">WR1: SIZEOF(weights_data) = SIZEOF(SELF\b_spline_curve.
            control_points_list);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_curve.wr:wr2">WR2: curve_weights_positive(SELF);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.rational_b_spline_surface">ENTITY <b>rational_b_spline_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_surface">b_spline_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_surface.weights_data">weights_data : </A>LIST[2:?] OF LIST[2:?] OF REAL;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_surface.weights">weights : </A>ARRAY[0:0] OF ARRAY[0:0] OF REAL := make_array_of_array(weights_data,0,u_upper,0,v_upper);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_surface.wr:wr1">WR1: (SIZEOF(weights_data) =
            SIZEOF(SELF\b_spline_surface.control_points_list))
            AND (SIZEOF(weights_data[1]) =
            SIZEOF(SELF\b_spline_surface.control_points_list[1]));</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_surface.wr:wr2">WR2: surface_weights_positive(SELF);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.rational_b_spline_volume">ENTITY <b>rational_b_spline_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_volume">b_spline_volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_volume.weights_data">weights_data : </A>LIST[2:?] OF LIST[2:?] OF LIST[2:?] OF REAL;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_volume.weights">weights : </A>ARRAY[0:0] OF ARRAY[0:0] OF ARRAY[0:0] OF REAL := make_array_of_array_of_array
         (weights_data,0,u_upper,0,v_upper,0,w_upper);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_volume.wr:wr1">WR1: (SIZEOF(weights_data) =
            SIZEOF(SELF\b_spline_volume.control_points_list))
            AND (SIZEOF(weights_data[1]) =
            SIZEOF(SELF\b_spline_volume.control_points_list[1]))
            AND (SIZEOF(weights_data[1][1]) =
            SIZEOF(SELF\b_spline_volume.control_points_list[1][1]));</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rational_b_spline_volume.wr:wr2">WR2: volume_weights_positive(SELF);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.rectangular_composite_surface">ENTITY <b>rectangular_composite_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.bounded_surface">bounded_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_composite_surface.segments">segments : </A>LIST[1:?] OF LIST[1:?] OF <A HREF="#geometry_schema.surface_patch">surface_patch</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_composite_surface.n_u">n_u : </A>INTEGER := SIZEOF(segments);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_composite_surface.n_v">n_v : </A>INTEGER := SIZEOF(segments[1]);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_composite_surface.wr:wr1">WR1: SIZEOF(QUERY (s &lt;* segments | n_v &lt;&gt; SIZEOF (s))) = 0;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_composite_surface.wr:wr2">WR2: constraints_rectangular_composite_surface(SELF);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.rectangular_trimmed_surface">ENTITY <b>rectangular_trimmed_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.bounded_surface">bounded_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.basis_surface">basis_surface : </A><A HREF="#geometry_schema.surface">surface</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.u1">u1 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.u2">u2 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.v1">v1 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.v2">v2 : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.usense">usense : </A>BOOLEAN;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.vsense">vsense : </A>BOOLEAN;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.wr:wr1">WR1: u1 &lt;&gt; u2;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.wr:wr2">WR2: v1 &lt;&gt; v2;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.wr:wr3">WR3: (('GEOMETRY_SCHEMA.ELEMENTARY_SURFACE' IN TYPEOF(basis_surface))
            AND  (NOT ('GEOMETRY_SCHEMA.PLANE' IN TYPEOF(basis_surface)))) OR
            ('GEOMETRY_SCHEMA.SURFACE_OF_REVOLUTION' IN TYPEOF(basis_surface))
            OR (usense = (u2 &gt; u1));</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.rectangular_trimmed_surface.wr:wr4">WR4: (('GEOMETRY_SCHEMA.SPHERICAL_SURFACE' IN TYPEOF(basis_surface))
            OR
            ('GEOMETRY_SCHEMA.TOROIDAL_SURFACE' IN TYPEOF(basis_surface)))
            OR (vsense = (v2 &gt; v1));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.reparametrised_composite_curve_segment">ENTITY <b>reparametrised_composite_curve_segment</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.composite_curve_segment">composite_curve_segment</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.reparametrised_composite_curve_segment.param_length">param_length : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.reparametrised_composite_curve_segment.wr:wr1">WR1: param_length &gt; 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.seam_curve">ENTITY <b>seam_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.surface_curve">surface_curve</A>);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.seam_curve.wr:wr1">WR1: SIZEOF(SELF\surface_curve.associated_geometry) = 2;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.seam_curve.wr:wr2">WR2: associated_surface(SELF\surface_curve.associated_geometry[1]) =
            associated_surface(SELF\surface_curve.associated_geometry[2]);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.seam_curve.wr:wr3">WR3: 'GEOMETRY_SCHEMA.PCURVE' IN
            TYPEOF(SELF\surface_curve.associated_geometry[1]);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.seam_curve.wr:wr4">WR4: 'GEOMETRY_SCHEMA.PCURVE' IN
            TYPEOF(SELF\surface_curve.associated_geometry[2]);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.spherical_point">ENTITY <b>spherical_point</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.cartesian_point">cartesian_point</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.spherical_point.r">r : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.spherical_point.theta">theta : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.plane_angle_measure">plane_angle_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.spherical_point.phi">phi : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.plane_angle_measure">plane_angle_measure</A>;<br>DERIVE<br>
         &nbsp;&nbsp;SELF\<A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A>.<A NAME="geometry_schema.spherical_point.coordinates">coordinates : </A>LIST[1:3] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A> := [r*sin(theta)*cos(phi), r*sin(theta)*sin(phi), r*cos(theta)];<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.spherical_point.wr:wr1">WR1: r &gt;= 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.spherical_surface">ENTITY <b>spherical_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.elementary_surface">elementary_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.spherical_surface.radius">radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.spherical_volume">ENTITY <b>spherical_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.spherical_volume.position">position : </A><A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.spherical_volume.radius">radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.surface">ENTITY <b>surface</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.elementary_surface">elementary_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.swept_surface">swept_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.bounded_surface">bounded_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.offset_surface">offset_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.surface_replica">surface_replica</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.geometric_representation_item">geometric_representation_item</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.surface_curve">ENTITY <b>surface_curve</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.intersection_curve">intersection_curve</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.seam_curve">seam_curve</A>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ANDOR&nbsp;<A HREF="#geometry_schema.bounded_surface_curve">bounded_surface_curve</A>)<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.curve">curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve.curve_3d">curve_3d : </A><A HREF="#geometry_schema.curve">curve</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve.associated_geometry">associated_geometry : </A>LIST[1:2] OF <A HREF="#geometry_schema.pcurve_or_surface">pcurve_or_surface</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve.master_representation">master_representation : </A><A HREF="#geometry_schema.preferred_surface_curve_representation">preferred_surface_curve_representation</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve.basis_surface">basis_surface : </A>SET[1:2] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.surface">surface</A> := get_basis_surface(SELF);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve.wr:wr1">WR1: curve_3d.dim = 3;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve.wr:wr2">WR2: ('GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(associated_geometry[1])) OR
            (master_representation &lt;&gt; pcurve_s1);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve.wr:wr3">WR3: ('GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(associated_geometry[2])) OR
            (master_representation &lt;&gt; pcurve_s2);</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve.wr:wr4">WR4: NOT ('GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(curve_3d));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.surface_curve_swept_surface">ENTITY <b>surface_curve_swept_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.swept_surface">swept_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve_swept_surface.directrix">directrix : </A><A HREF="#geometry_schema.curve">curve</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve_swept_surface.reference_surface">reference_surface : </A><A HREF="#geometry_schema.surface">surface</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_curve_swept_surface.wr:wr1">WR1: (NOT ('GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF(directrix))) OR
            (reference_surface IN (directrix\surface_curve.basis_surface));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.surface_of_linear_extrusion">ENTITY <b>surface_of_linear_extrusion</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.swept_surface">swept_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_of_linear_extrusion.extrusion_axis">extrusion_axis : </A><A HREF="#geometry_schema.vector">vector</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.surface_of_revolution">ENTITY <b>surface_of_revolution</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.swept_surface">swept_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_of_revolution.axis_position">axis_position : </A><A HREF="#geometry_schema.axis1_placement">axis1_placement</A>;<br>DERIVE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_of_revolution.axis_line">axis_line : </A><A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.line">line</A> := representation_item('')||
         geometric_representation_item()|| curve()||
         line(axis_position.location, representation_item('')||
         geometric_representation_item()||
         vector(axis_position.z, 1.0));<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.surface_patch">ENTITY <b>surface_patch</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.founded_item">founded_item</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_patch.parent_surface">parent_surface : </A><A HREF="#geometry_schema.bounded_surface">bounded_surface</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_patch.u_transition">u_transition : </A><A HREF="#geometry_schema.transition_code">transition_code</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_patch.v_transition">v_transition : </A><A HREF="#geometry_schema.transition_code">transition_code</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_patch.u_sense">u_sense : </A>BOOLEAN;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_patch.v_sense">v_sense : </A>BOOLEAN;<br>INVERSE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_patch.using_surfaces">using_surfaces : </A>BAG[1:?] OF <A HREF="#geometry_schema.rectangular_composite_surface">rectangular_composite_surface</A> FOR segments;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_patch.wr:wr1">WR1: (NOT ('GEOMETRY_SCHEMA.CURVE_BOUNDED_SURFACE' 
            IN TYPEOF(parent_surface)));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.surface_replica">ENTITY <b>surface_replica</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.surface">surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_replica.parent_surface">parent_surface : </A><A HREF="#geometry_schema.surface">surface</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_replica.transformation">transformation : </A><A HREF="#geometry_schema.cartesian_transformation_operator_3d">cartesian_transformation_operator_3d</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.surface_replica.wr:wr1">WR1: acyclic_surface_replica(SELF, parent_surface);</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.swept_surface">ENTITY <b>swept_surface</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.surface_of_linear_extrusion">surface_of_linear_extrusion</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.surface_of_revolution">surface_of_revolution</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.surface_curve_swept_surface">surface_curve_swept_surface</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.fixed_reference_swept_surface">fixed_reference_swept_surface</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.surface">surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.swept_surface.swept_curve">swept_curve : </A><A HREF="#geometry_schema.curve">curve</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.tetrahedron_volume">ENTITY <b>tetrahedron_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.tetrahedron_volume.point_1">point_1 : </A><A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.tetrahedron_volume.point_2">point_2 : </A><A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.tetrahedron_volume.point_3">point_3 : </A><A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.tetrahedron_volume.point_4">point_4 : </A><A HREF="#geometry_schema.cartesian_point">cartesian_point</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.tetrahedron_volume.wr:wr1">WR1: point_1.dim = 3;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.tetrahedron_volume.wr:wr2">WR2: above_plane(point_1, point_2, point_3, point_4) &lt;&gt; 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.toroidal_surface">ENTITY <b>toroidal_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.elementary_surface">elementary_surface</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.toroidal_surface.major_radius">major_radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.toroidal_surface.minor_radius">minor_radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.toroidal_volume">ENTITY <b>toroidal_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.toroidal_volume.position">position : </A><A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.toroidal_volume.major_radius">major_radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.toroidal_volume.minor_radius">minor_radius : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.toroidal_volume.wr:wr1">WR1: minor_radius &lt; major_radius;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.trimmed_curve">ENTITY <b>trimmed_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.bounded_curve">bounded_curve</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.trimmed_curve.basis_curve">basis_curve : </A><A HREF="#geometry_schema.curve">curve</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.trimmed_curve.trim_1">trim_1 : </A>SET[1:2] OF <A HREF="#geometry_schema.trimming_select">trimming_select</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.trimmed_curve.trim_2">trim_2 : </A>SET[1:2] OF <A HREF="#geometry_schema.trimming_select">trimming_select</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.trimmed_curve.sense_agreement">sense_agreement : </A>BOOLEAN;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.trimmed_curve.master_representation">master_representation : </A><A HREF="#geometry_schema.trimming_preference">trimming_preference</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.trimmed_curve.wr:wr1">WR1: (HIINDEX(trim_1) = 1) OR (TYPEOF(trim_1[1]) &lt;&gt; TYPEOF(trim_1[2]));</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.trimmed_curve.wr:wr2">WR2: (HIINDEX(trim_2) = 1) OR (TYPEOF(trim_2[1]) &lt;&gt; TYPEOF(trim_2[2]));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.uniform_curve">ENTITY <b>uniform_curve</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_curve">b_spline_curve</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.uniform_surface">ENTITY <b>uniform_surface</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_surface">b_spline_surface</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.uniform_volume">ENTITY <b>uniform_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.b_spline_volume">b_spline_volume</A>);<br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.vector">ENTITY <b>vector</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.geometric_representation_item">geometric_representation_item</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.vector.orientation">orientation : </A><A HREF="#geometry_schema.direction">direction</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.vector.magnitude">magnitude : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.vector.wr:wr1">WR1: magnitude &gt;= 0.0;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.volume">ENTITY <b>volume</b></A><br>
         &nbsp;&nbsp;SUPERTYPE OF 
         (ONEOF&nbsp;(<A HREF="#geometry_schema.block_volume">block_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.wedge_volume">wedge_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.spherical_volume">spherical_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.cylindrical_volume">cylindrical_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.eccentric_conical_volume">eccentric_conical_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.toroidal_volume">toroidal_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.pyramid_volume">pyramid_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.b_spline_volume">b_spline_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.ellipsoid_volume">ellipsoid_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.tetrahedron_volume">tetrahedron_volume</A>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="#geometry_schema.hexahedron_volume">hexahedron_volume</A>))<br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.geometric_representation_item">geometric_representation_item</A>);<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.volume.wr:wr1">WR1: SELF\geometric_representation_item.dim = 3;</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.wedge_volume">ENTITY <b>wedge_volume</b></A><br>
         &nbsp;&nbsp;SUBTYPE OF (<A HREF="#geometry_schema.volume">volume</A>);<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.wedge_volume.position">position : </A><A HREF="#geometry_schema.axis2_placement_3d">axis2_placement_3d</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.wedge_volume.x">x : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.wedge_volume.y">y : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.wedge_volume.z">z : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.positive_length_measure">positive_length_measure</A>;<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.wedge_volume.ltx">ltx : </A><A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.length_measure">length_measure</A>;<br>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.wedge_volume.wr:wr1">WR1: ((0.0 &lt;= ltx) AND (ltx &lt; x));</A><br>
         
         END_ENTITY;<br></code><code><br><A NAME="geometry_schema.compatible_dimension">RULE&nbsp;<b>compatible_dimension</b></A>&nbsp;FOR <br>
         (<A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A>, <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>, <A HREF="../../../data/resources/representation_schema/representation_schema.htm#representation_schema.representation_context">representation_context</A>, <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.geometric_representation_context">geometric_representation_context</A>);<br></code><code>WHERE<br>
         &nbsp;&nbsp;<A NAME="geometry_schema.compatible_dimension.wr:wr1">WR1: SIZEOF(QUERY(x &lt;* cartesian_point| SIZEOF(QUERY
            (y &lt;* geometric_representation_context | item_in_context(x,y) AND
            (HIINDEX(x.coordinates) &lt;&gt; y.coordinate_space_dimension))) &gt; 0 )) =0;</A><br>
         &nbsp;&nbsp;<A NAME="geometry_schema.compatible_dimension.wr:wr2">WR2: SIZEOF(QUERY(x &lt;* direction | SIZEOF( QUERY
            (y &lt;* geometric_representation_context | item_in_context(x,y) AND
            (HIINDEX(x.direction_ratios) &lt;&gt; y.coordinate_space_dimension)))
            &gt; 0 )) = 0;</A><br></code><code>
         END_RULE;
         </code><br><code><br><A NAME="geometry_schema.above_plane">FUNCTION <b>above_plane</b></A><br>&nbsp;(p1 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A>; p2 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A>; p3 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A>; p4 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A>) : REAL;
         </code><pre>LOCAL
     dir2, dir3, dir4 : direction :=
                 dummy_gri || direction([1.0, 0.0, 0.0]);
     val, mag         : REAL;
   END_LOCAL;

   IF (p1.dim &lt;&gt; 3) THEN
     RETURN(?);
   END_IF;
   REPEAT i := 1 TO 3;
     dir2.direction_ratios[i] := p2.coordinates[i] - p1.coordinates[i];
     dir3.direction_ratios[i] := p3.coordinates[i] - p1.coordinates[i];
     dir4.direction_ratios[i] := p4.coordinates[i] - p1.coordinates[i];
     mag := dir4.direction_ratios[i]*dir4.direction_ratios[i];
  END_REPEAT;
  mag := sqrt(mag);
  val := mag*dot_product(dir4, cross_product(dir2, dir3).orientation);
  RETURN(val);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.acyclic_curve_replica">FUNCTION <b>acyclic_curve_replica</b></A><br>&nbsp;(rep : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.curve_replica">curve_replica</A>; parent : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.curve">curve</A>) : BOOLEAN;
         </code><pre>IF NOT (('GEOMETRY_SCHEMA.CURVE_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type curve_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same curve_replica, otherwise,
   call function again with the parents own parent_curve.     *)
    ELSE
    RETURN(acyclic_curve_replica(rep,
               parent\curve_replica.parent_curve));
    END_IF;</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.acyclic_point_replica">FUNCTION <b>acyclic_point_replica</b></A><br>&nbsp;(rep : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.point_replica">point_replica</A>; parent : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.point">point</A>) : BOOLEAN;
         </code><pre>IF NOT (('GEOMETRY_SCHEMA.POINT_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type point_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same point_replica, otherwise,
   call function again with the parents own parent_pt.     *)
    ELSE RETURN(acyclic_point_replica(rep, parent\point_replica.parent_pt));
    END_IF;</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.acyclic_surface_replica">FUNCTION <b>acyclic_surface_replica</b></A><br>&nbsp;(rep : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.surface_replica">surface_replica</A>; parent : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.surface">surface</A>) : BOOLEAN;
         </code><pre>IF NOT (('GEOMETRY_SCHEMA.SURFACE_REPLICA') IN TYPEOF(parent)) THEN
      RETURN (TRUE);
   END_IF;
 (* Return TRUE if the parent is not of type surface_replica *)
   IF (parent :=: rep) THEN
      RETURN (FALSE);
  (* Return FALSE if the parent is the same surface_replica, otherwise,
   call function again with the parents own parent_surface.     *)
    ELSE RETURN(acyclic_surface_replica(rep,
                   parent\surface_replica.parent_surface));
    END_IF;</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.associated_surface">FUNCTION <b>associated_surface</b></A><br>&nbsp;(arg : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.pcurve_or_surface">pcurve_or_surface</A>) : <A HREF="#geometry_schema.surface">surface</A>;
         </code><pre>LOCAL
     surf : surface;
   END_LOCAL;
   
   IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF(arg) THEN
     surf := arg\pcurve.basis_surface;
   ELSE
     surf := arg;
   END_IF;
   RETURN(surf);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.base_axis">FUNCTION <b>base_axis</b></A><br>&nbsp;(dim : INTEGER; axis1 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>; axis2 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>; axis3 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>) : LIST[2:3] OF <A HREF="#geometry_schema.direction">direction</A>;
         </code><pre>LOCAL
    u      : LIST [2:3] OF direction;
    factor : REAL;
    d1, d2 : direction;
  END_LOCAL;
  
  IF (dim = 3) THEN
    d1 := NVL(normalise(axis3),  dummy_gri || direction([0.0,0.0,1.0]));
    d2 := first_proj_axis(d1,axis1);
    u := [d2, second_proj_axis(d1,d2,axis2), d1];
  ELSE
     IF EXISTS(axis1) THEN
      d1 := normalise(axis1);
      u := [d1, orthogonal_complement(d1)];
      IF EXISTS(axis2) THEN
        factor := dot_product(axis2,u[2]);
        IF (factor &lt; 0.0) THEN
          u[2].direction_ratios[1] := -u[2].direction_ratios[1];
          u[2].direction_ratios[2] := -u[2].direction_ratios[2];
        END_IF;
      END_IF;
    ELSE
      IF EXISTS(axis2) THEN
        d1 := normalise(axis2);
        u := [orthogonal_complement(d1), d1]; 
        u[1].direction_ratios[1] := -u[1].direction_ratios[1];
        u[1].direction_ratios[2] := -u[1].direction_ratios[2];
      ELSE
        u := [dummy_gri || direction([1.0, 0.0]), dummy_gri ||
                                                direction([0.0, 1.0])];
      END_IF;
    END_IF;
  END_IF;
  RETURN(u);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.build_2axes">FUNCTION <b>build_2axes</b></A><br>&nbsp;(ref_direction : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>) : LIST[2:2] OF <A HREF="#geometry_schema.direction">direction</A>;
         </code><pre>LOCAL
     d : direction := NVL(normalise(ref_direction),
                          dummy_gri || direction([1.0,0.0]));
   END_LOCAL;

   RETURN([d, orthogonal_complement(d)]);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.build_axes">FUNCTION <b>build_axes</b></A><br>&nbsp;(axis : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>; ref_direction : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>) : LIST[3:3] OF <A HREF="#geometry_schema.direction">direction</A>;
         </code><pre>LOCAL
       d1, d2 : direction;
     END_LOCAL;
    d1 := NVL(normalise(axis), dummy_gri || direction([0.0,0.0,1.0]));
    d2 := first_proj_axis(d1, ref_direction);
    RETURN([d2, normalise(cross_product(d1,d2))\vector.orientation, d1]);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.constraints_composite_curve_on_surface">FUNCTION <b>constraints_composite_curve_on_surface</b></A><br>&nbsp;(c : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.composite_curve_on_surface">composite_curve_on_surface</A>) : BOOLEAN;
         </code><pre>LOCAL
     n_segments : INTEGER := SIZEOF(c.segments);
   END_LOCAL;
        
   REPEAT k := 1 TO n_segments;
     IF (NOT('GEOMETRY_SCHEMA.PCURVE' IN 
           TYPEOF(c\composite_curve.segments[k].parent_curve))) AND
        (NOT('GEOMETRY_SCHEMA.SURFACE_CURVE' IN 
           TYPEOF(c\composite_curve.segments[k].parent_curve))) AND
        (NOT('GEOMETRY_SCHEMA.COMPOSITE_CURVE_ON_SURFACE' IN
           TYPEOF(c\composite_curve.segments[k].parent_curve)))  THEN
       RETURN (FALSE);
     END_IF;
   END_REPEAT;
   RETURN(TRUE);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.constraints_param_b_spline">FUNCTION <b>constraints_param_b_spline</b></A><br>&nbsp;(degree : INTEGER; up_knots : INTEGER; up_cp : INTEGER; knot_mult : LIST[0:?] OF INTEGER; knots : LIST[0:?] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>) : BOOLEAN;
         </code><pre>LOCAL
     result  : BOOLEAN := TRUE;
     k, sum  : INTEGER;
   END_LOCAL;
   
   (* Find sum of knot multiplicities. *)
   sum := knot_mult[1];
   
   REPEAT i := 2 TO up_knots;
     sum := sum + knot_mult[i];
   END_REPEAT;
   
   (* Check limits holding for all B-spline parametrisations *)
   IF (degree &lt; 1) OR (up_knots &lt; 2) OR (up_cp &lt; degree) OR
         (sum &lt;&gt; (degree + up_cp + 2)) THEN
     result := FALSE;
     RETURN(result);
   END_IF;
   
   k := knot_mult[1];
   
   IF (k &lt; 1) OR (k &gt; degree + 1) THEN
     result := FALSE;
     RETURN(result);
   END_IF;
      
   REPEAT i := 2 TO up_knots;
     IF (knot_mult[i] &lt; 1) OR (knots[i] &lt;= knots[i-1]) THEN
       result := FALSE;
       RETURN(result);
     END_IF;
        
     k := knot_mult[i];
     
     IF (i &lt; up_knots) AND (k &gt; degree) THEN
       result := FALSE;
       RETURN(result);
     END_IF;
        
     IF (i = up_knots) AND (k &gt; degree + 1) THEN
       result := FALSE;
       RETURN(result);
     END_IF;
   END_REPEAT;
   RETURN(result);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.constraints_rectangular_composite_surface">FUNCTION <b>constraints_rectangular_composite_surface</b></A><br>&nbsp;(s : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.rectangular_composite_surface">rectangular_composite_surface</A>) : BOOLEAN;
         </code><pre>REPEAT i := 1 TO s.n_u;
       REPEAT j := 1 TO s.n_v;
         IF NOT (('GEOMETRY_SCHEMA.B_SPLINE_SURFACE' IN TYPEOF
                    (s.segments[i][j].parent_surface)) OR
                 ('GEOMETRY_SCHEMA.RECTANGULAR_TRIMMED_SURFACE' IN TYPEOF
                    (s.segments[i][j].parent_surface))) THEN
           RETURN(FALSE);
       END_IF;
     END_REPEAT;
   END_REPEAT;

   (* Check the transition codes, omitting the last row or column *)
   REPEAT i := 1 TO s.n_u-1;
     REPEAT j := 1 TO s.n_v;
       IF s.segments[i][j].u_transition = discontinuous THEN
         RETURN(FALSE);
       END_IF;
     END_REPEAT;
   END_REPEAT;
   
   REPEAT i := 1 TO s.n_u;
     REPEAT j := 1 TO s.n_v-1;
       IF s.segments[i][j].v_transition = discontinuous THEN
         RETURN(FALSE);
       END_IF;
     END_REPEAT;
   END_REPEAT;
   RETURN(TRUE);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.cross_product">FUNCTION <b>cross_product</b></A><br>&nbsp;(arg1 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>; arg2 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>) : <A HREF="#geometry_schema.vector">vector</A>;
         </code><pre>LOCAL
    mag    : REAL;
    res    : direction;
    v1,v2  : LIST[3:3] OF REAL;
    result : vector;
  END_LOCAL;
  
  IF ( NOT EXISTS (arg1) OR (arg1.dim = 2)) OR
     ( NOT EXISTS (arg2) OR (arg2.dim = 2)) THEN
    RETURN(?);
  ELSE
    BEGIN
      v1  := normalise(arg1).direction_ratios;
      v2  := normalise(arg2).direction_ratios;
      res := dummy_gri || direction([(v1[2]*v2[3] - v1[3]*v2[2]),
            (v1[3]*v2[1] - v1[1]*v2[3]), (v1[1]*v2[2] - v1[2]*v2[1])]);
      mag := 0.0;
      REPEAT i := 1 TO 3;
        mag := mag + res.direction_ratios[i]*res.direction_ratios[i];
      END_REPEAT;
      IF (mag &gt; 0.0) THEN
        result := dummy_gri || vector(res, SQRT(mag));
      ELSE
        result := dummy_gri || vector(arg1, 0.0);
      END_IF;
      RETURN(result);
    END;
  END_IF;</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.curve_weights_positive">FUNCTION <b>curve_weights_positive</b></A><br>&nbsp;(b : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.rational_b_spline_curve">rational_b_spline_curve</A>) : BOOLEAN;
         </code><pre>LOCAL
     result : BOOLEAN := TRUE;
   END_LOCAL;

   REPEAT i := 0 TO b.upper_index_on_control_points;
     IF b.weights[i] &lt;= 0.0  THEN
       result := FALSE;
       RETURN(result);
     END_IF;
   END_REPEAT;
   RETURN(result);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.default_b_spline_curve_weights">FUNCTION <b>default_b_spline_curve_weights</b></A><br>&nbsp;(up_cp : INTEGER) : ARRAY[0:0] OF REAL;
         </code><pre>RETURN([1:up_cp + 1]);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.default_b_spline_knot_mult">FUNCTION <b>default_b_spline_knot_mult</b></A><br>&nbsp;(degree : INTEGER; up_knots : INTEGER; uniform : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.knot_type">knot_type</A>) : LIST[2:?] OF INTEGER;
         </code><pre>LOCAL
     knot_mult : LIST [1:up_knots] OF INTEGER;
   END_LOCAL;
        
   IF uniform = uniform_knots THEN
     knot_mult := [1:up_knots];
   ELSE
     IF uniform = quasi_uniform_knots THEN
       knot_mult := [1:up_knots];
       knot_mult[1] := degree + 1;
       knot_mult[up_knots] := degree + 1;
     ELSE
       IF uniform = piecewise_bezier_knots THEN
         knot_mult := [degree:up_knots];
         knot_mult[1] := degree + 1;
         knot_mult[up_knots] := degree + 1;
       ELSE
         knot_mult := [0:up_knots];
       END_IF;
     END_IF;
   END_IF;
   RETURN(knot_mult);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.default_b_spline_knots">FUNCTION <b>default_b_spline_knots</b></A><br>&nbsp;(degree : INTEGER; up_knots : INTEGER; uniform : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.knot_type">knot_type</A>) : LIST[2:?] OF <A HREF="../../../data/resources/measure_schema/measure_schema.htm#measure_schema.parameter_value">parameter_value</A>;
         </code><pre>LOCAL
    knots  : LIST [1:up_knots] OF parameter_value := [0:up_knots];
    ishift : INTEGER := 1;
  END_LOCAL;

  IF (uniform = uniform_knots) THEN
     ishift := degree + 1;
  END_if;
  IF (uniform = uniform_knots) OR 
     (uniform = quasi_uniform_knots) OR
     (uniform = piecewise_bezier_knots) THEN
    
    REPEAT i := 1 TO up_knots;
      knots[i] := i - ishift;
    END_REPEAT;
  END_IF;
  RETURN(knots);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.default_b_spline_surface_weights">FUNCTION <b>default_b_spline_surface_weights</b></A><br>&nbsp;(u_upper : INTEGER; v_upper : INTEGER) : ARRAY[0:0] OF ARRAY[0:0] OF REAL;
         </code><pre>RETURN([[1:v_upper + 1]:u_upper +1]);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.dimension_of">FUNCTION <b>dimension_of</b></A><br>&nbsp;(item : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.geometric_representation_item">geometric_representation_item</A>) : <A HREF="#geometry_schema.dimension_count">dimension_count</A>;
         </code><pre>LOCAL
    x   : SET OF representation;
    y   : representation_context;
    dim : dimension_count;
  END_LOCAL;
  -- For cartesian_point, direction, or vector dimension is determined by
  -- counting components.
    IF 'GEOMETRY_SCHEMA.CARTESIAN_POINT' IN TYPEOF(item) THEN
       dim := SIZEOF(item\cartesian_point.coordinates);
       RETURN(dim);
    END_IF;
    IF 'GEOMETRY_SCHEMA.DIRECTION' IN TYPEOF(item) THEN
       dim := SIZEOF(item\direction.direction_ratios);
       RETURN(dim);
    END_IF;
    IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(item) THEN
       dim := SIZEOF(item\vector.orientation\direction.direction_ratios);
       RETURN(dim);
    END_IF;
  -- For all other types of geometric_representation_item dim is obtained
  -- via context.
  -- Find the set of representation in which the item is used. 

  x := using_representations(item);

  -- Determines the dimension_count of the 
  -- geometric_representation_context. Note that the 
  -- RULE compatible_dimension ensures that the context_of_items
  -- is of type geometric_representation_context and has
  -- the same dimension_count for all values of x.
  -- The SET x is non-empty since this is required by WR1 of
  -- representation_item.
    y := x[1].context_of_items;
    dim := y\geometric_representation_context.coordinate_space_dimension;
    RETURN (dim);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.dot_product">FUNCTION <b>dot_product</b></A><br>&nbsp;(arg1 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>; arg2 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>) : REAL;
         </code><pre>LOCAL
     scalar : REAL;
     vec1, vec2: direction;
     ndim : INTEGER;
   END_LOCAL;
   
   IF NOT EXISTS (arg1) OR NOT EXISTS (arg2) THEN
     scalar := ?;
     (* When function is called with invalid data an indeterminate result
     is returned *)
   ELSE
     IF (arg1.dim &lt;&gt; arg2.dim) THEN
       scalar := ?;
     (* When function is called with invalid data an indeterminate result
     is returned *)
     ELSE
       BEGIN
         vec1   := normalise(arg1);
         vec2   := normalise(arg2);
         ndim   := arg1.dim;
         scalar := 0.0;
         REPEAT  i := 1 TO ndim;
           scalar := scalar +
                       vec1.direction_ratios[i]*vec2.direction_ratios[i];
         END_REPEAT;
       END;
     END_IF;
   END_IF;
   RETURN (scalar);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.first_proj_axis">FUNCTION <b>first_proj_axis</b></A><br>&nbsp;(z_axis : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>; arg : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>) : <A HREF="#geometry_schema.direction">direction</A>;
         </code><pre>LOCAL
    x_axis : direction;
    v      : direction;
    z      : direction;
    x_vec  : vector;
  END_LOCAL;
  
  IF (NOT EXISTS(z_axis)) THEN
    RETURN (?) ;
  ELSE
    z := normalise(z_axis);
    IF NOT EXISTS(arg) THEN
      IF ((z.direction_ratios &lt;&gt; [1.0,0.0,0.0]) AND
          (z.direction_ratios &lt;&gt; [-1.0,0.0,0.0]))  THEN
        v :=  dummy_gri || direction([1.0,0.0,0.0]);
      ELSE
        v := dummy_gri || direction([0.0,1.0,0.0]);
      END_IF;
    ELSE
      IF  (arg.dim &lt;&gt; 3) THEN
        RETURN (?) ;
      END_IF;
      IF ((cross_product(arg,z).magnitude) = 0.0) THEN
        RETURN (?);
      ELSE
        v := normalise(arg);
      END_IF;
    END_IF;
    x_vec := scalar_times_vector(dot_product(v, z), z);
    x_axis := vector_difference(v, x_vec).orientation;
    x_axis := normalise(x_axis);
  END_IF;
  RETURN(x_axis);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.get_basis_surface">FUNCTION <b>get_basis_surface</b></A><br>&nbsp;(c : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.curve_on_surface">curve_on_surface</A>) : SET[0:2] OF <A HREF="#geometry_schema.surface">surface</A>;
         </code><pre>LOCAL
    surfs  : SET[0:2] OF surface;
    n      : INTEGER;
  END_LOCAL;
  surfs := [];
  IF 'GEOMETRY_SCHEMA.PCURVE' IN TYPEOF (c) THEN
    surfs := [c\pcurve.basis_surface];
  ELSE
    IF 'GEOMETRY_SCHEMA.SURFACE_CURVE' IN TYPEOF (c) THEN
      n := SIZEOF(c\surface_curve.associated_geometry);
      REPEAT i := 1 TO n;
      surfs := surfs +
                associated_surface(c\surface_curve.associated_geometry[i]);
      END_REPEAT;
    END_IF;
  END_IF;
  IF 'GEOMETRY_SCHEMA.COMPOSITE_CURVE_ON_SURFACE' IN TYPEOF (c) THEN
   (* For a composite_curve_on_surface the basis_surface is the intersection
    of the basis_surfaces of all the segments. *)
     n := SIZEOF(c\composite_curve.segments);
     surfs := get_basis_surface(
                     c\composite_curve.segments[1].parent_curve);
     IF n &gt; 1 THEN
       REPEAT i := 2 TO n;
         surfs := surfs * get_basis_surface(
                  c\composite_curve.segments[i].parent_curve);
       END_REPEAT;
     END_IF;

  END_IF;
  RETURN(surfs);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.list_to_array">FUNCTION <b>list_to_array</b></A><br>&nbsp;(lis : LIST[0:?] OF GENERIC; low : INTEGER; u : INTEGER) : ARRAY[0:0] OF GENERIC;
         </code><pre>LOCAL
     n   : INTEGER;
     res : ARRAY [low:u] OF GENERIC : T;
   END_LOCAL;
      
   n := SIZEOF(lis);
   IF (n &lt;&gt; (u-low +1)) THEN
     RETURN(?);
   ELSE
     res := [lis[1] : n];
     REPEAT i := 2 TO n;
       res[low+i-1] := lis[i];
     END_REPEAT;
     RETURN(res);
   END_IF;</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.make_array_of_array">FUNCTION <b>make_array_of_array</b></A><br>&nbsp;(lis : LIST[1:?] OF LIST[1:?] OF GENERIC; low1 : INTEGER; u1 : INTEGER; low2 : INTEGER; u2 : INTEGER) : ARRAY[0:0] OF ARRAY[0:0] OF GENERIC;
         </code><pre>LOCAL
     res   : ARRAY[low1:u1] OF ARRAY [low2:u2] OF GENERIC : T;
   END_LOCAL;

(* Check input dimensions for consistency *)
   IF (u1-low1+1) &lt;&gt; SIZEOF(lis) THEN
     RETURN (?);
   END_IF;
   IF (u2 - low2 + 1 ) &lt;&gt; SIZEOF(lis[1]) THEN
     RETURN (?) ;
   END_IF;
(* Initialise res with values from lis[1] *)
   res := [list_to_array(lis[1], low2, u2) : (u1-low1 + 1)];
   REPEAT i := 2 TO HIINDEX(lis);
     IF (u2-low2+1) &lt;&gt; SIZEOF(lis[i]) THEN
       RETURN (?);
     END_IF;     
     res[low1+i-1] := list_to_array(lis[i], low2, u2);
   END_REPEAT; 
   
   RETURN (res);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.make_array_of_array_of_array">FUNCTION <b>make_array_of_array_of_array</b></A><br>&nbsp;(lis : LIST[1:?] OF LIST[1:?] OF LIST[1:?] OF GENERIC; low1 : INTEGER; u1 : INTEGER; low2 : INTEGER; u2 : INTEGER; low3 : INTEGER; u3 : INTEGER) : ARRAY[0:0] OF ARRAY[0:0] OF ARRAY[0:0] OF GENERIC;
         </code><pre>LOCAL 
   res   : ARRAY[low1:u1] OF ARRAY [low2:u2] OF
             ARRAY[low3:u3] OF GENERIC : T;
 END_LOCAL;                

(* Check input dimensions for consistency *)
   IF (u1-low1+1) &lt;&gt; SIZEOF(lis) THEN
     RETURN (?);
   END_IF;
   IF (u2-low2+1) &lt;&gt; SIZEOF(lis[1]) THEN
     RETURN (?);
   END_IF;
(* Initialise res with values from lis[1] *)
   res := [make_array_of_array(lis[1], low2, u2, low3, u3) : (u1-low1 + 1)];
   REPEAT i := 2 TO HIINDEX(lis);
     IF (u2-low2+1) &lt;&gt; SIZEOF(lis[i]) THEN
       RETURN (?);
     END_IF;  
     res[low1+i-1] := make_array_of_array(lis[i], low2, u2, low3, u3);
   END_REPEAT; 
   RETURN (res);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.normalise">FUNCTION <b>normalise</b></A><br>&nbsp;(arg : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.vector_or_direction">vector_or_direction</A>) : <A HREF="#geometry_schema.vector_or_direction">vector_or_direction</A>;
         </code><pre>LOCAL
      ndim   : INTEGER;
      v      : direction;
      result : vector_or_direction;
      vec    : vector;
      mag    : REAL;
    END_LOCAL;
    
    IF NOT EXISTS (arg) THEN
      result := ?;
  (* When function is called with invalid data a NULL result is returned *)
    ELSE
      ndim := arg.dim;
      IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg) THEN
        BEGIN
              v := dummy_gri || direction(arg\vector.orientation.direction_ratios);
          IF arg.magnitude = 0.0 THEN
            RETURN(?);
          ELSE
           vec := dummy_gri || vector (v, 1.0);
          END_IF;
        END;
      ELSE
        v := dummy_gri || direction (arg.direction_ratios);
      END_IF;
      mag := 0.0;
      REPEAT  i := 1 TO ndim;
        mag := mag + v.direction_ratios[i]*v.direction_ratios[i];
      END_REPEAT;
      IF mag &gt; 0.0 THEN
        mag := SQRT(mag);
        REPEAT  i := 1 TO ndim;
          v.direction_ratios[i] := v.direction_ratios[i]/mag;
        END_REPEAT;
        IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg) THEN
          vec.orientation := v;
          result := vec;
        ELSE
          result := v;
        END_IF;
      ELSE
        RETURN(?);
      END_IF;
    END_IF;
    RETURN (result);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.orthogonal_complement">FUNCTION <b>orthogonal_complement</b></A><br>&nbsp;(vec : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>) : <A HREF="#geometry_schema.direction">direction</A>;
         </code><pre>LOCAL
     result :  direction ;
   END_LOCAL;

   IF (vec.dim &lt;&gt; 2) OR NOT EXISTS (vec) THEN
     RETURN(?);
   ELSE
     result := dummy_gri || direction([-vec.direction_ratios[2],
                                          vec.direction_ratios[1]]);
     RETURN(result);
   END_IF;</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.same_side">FUNCTION <b>same_side</b></A><br>&nbsp;(plane_pts : LIST[3:3] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A>; test_points : LIST[2:?] OF <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.cartesian_point">cartesian_point</A>) : BOOLEAN;
         </code><pre>LOCAL
     val1, val2 : REAL;
     n          : INTEGER;
   END_LOCAL;

   IF (plane_pts[1].dim = 2) OR (test_points[1].dim = 2) THEN
     RETURN(?);
   END_IF;
   n := SIZEOF(test_points);
   val1 := above_plane(plane_pts[1], plane_pts[2], plane_pts[3],
                       test_points[1] );
   REPEAT i := 2 TO n;
     val2 := above_plane(plane_pts[1], plane_pts[2], plane_pts[3],
                       test_points[i] );
     IF (val1*val2 &lt;= 0.0) THEN
       RETURN(FALSE);
     END_IF;
   END_REPEAT;
   RETURN(TRUE);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.scalar_times_vector">FUNCTION <b>scalar_times_vector</b></A><br>&nbsp;(scalar : REAL; vec : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.vector_or_direction">vector_or_direction</A>) : <A HREF="#geometry_schema.vector">vector</A>;
         </code><pre>LOCAL
      v      : direction;
      mag    : REAL;
      result : vector;
    END_LOCAL;
 
    IF NOT EXISTS (scalar) OR NOT EXISTS (vec) THEN
      RETURN (?) ;
     ELSE
      IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF (vec) THEN
        v   := dummy_gri || direction(vec\vector.orientation.direction_ratios);
        mag := scalar * vec.magnitude;
      ELSE
        v   := dummy_gri || direction(vec.direction_ratios);
        mag := scalar;
      END_IF;
      IF (mag &lt; 0.0 ) THEN
        REPEAT i := 1 TO SIZEOF(v.direction_ratios);
          v.direction_ratios[i] := -v.direction_ratios[i];
        END_REPEAT;
        mag := -mag;
      END_IF;
      result := dummy_gri || vector(normalise(v), mag);
    END_IF;
    RETURN (result);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.second_proj_axis">FUNCTION <b>second_proj_axis</b></A><br>&nbsp;(z_axis : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>; x_axis : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>; arg : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.direction">direction</A>) : <A HREF="#geometry_schema.direction">direction</A>;
         </code><pre>LOCAL
     y_axis : vector;
     v      : direction;
     temp   : vector;
   END_LOCAL;
   
   IF NOT EXISTS(arg) THEN
     v := dummy_gri || direction([0.0,1.0,0.0]);
   ELSE
     v := arg;
   END_IF;
   
   temp   := scalar_times_vector(dot_product(v, z_axis), z_axis);
   y_axis := vector_difference(v, temp);
   temp   := scalar_times_vector(dot_product(v, x_axis), x_axis);
   y_axis := vector_difference(y_axis, temp);
   y_axis := normalise(y_axis);
   RETURN(y_axis.orientation);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.surface_weights_positive">FUNCTION <b>surface_weights_positive</b></A><br>&nbsp;(b : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.rational_b_spline_surface">rational_b_spline_surface</A>) : BOOLEAN;
         </code><pre>LOCAL
     result        : BOOLEAN := TRUE;
   END_LOCAL;
   
   REPEAT i := 0 TO b.u_upper;
     REPEAT j := 0 TO b.v_upper;
       IF (b.weights[i][j] &lt;= 0.0)  THEN
         result := FALSE;
         RETURN(result);
       END_IF;
     END_REPEAT;
   END_REPEAT;
   RETURN(result);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.vector_difference">FUNCTION <b>vector_difference</b></A><br>&nbsp;(arg1 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.vector_or_direction">vector_or_direction</A>; arg2 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.vector_or_direction">vector_or_direction</A>) : <A HREF="#geometry_schema.vector">vector</A>;
         </code><pre>LOCAL
      result          : vector;
      res, vec1, vec2 : direction;
      mag, mag1, mag2 : REAL;
      ndim            : INTEGER;
    END_LOCAL;
 
    IF ((NOT EXISTS (arg1)) OR (NOT EXISTS (arg2))) OR (arg1.dim &lt;&gt; arg2.dim)
        THEN
      RETURN (?) ;
     ELSE
      BEGIN
        IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg1) THEN
          mag1 := arg1.magnitude;
          vec1 := arg1\vector.orientation;
        ELSE
          mag1 := 1.0;
          vec1 := arg1;
        END_IF;
        IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg2) THEN
          mag2 := arg2.magnitude;
          vec2 := arg2\vector.orientation;
        ELSE
          mag2 := 1.0;
          vec2 := arg2;
        END_IF;
        vec1 := normalise (vec1);
        vec2 := normalise (vec2);
        ndim := SIZEOF(vec1.direction_ratios);
        mag := 0.0;
        res := dummy_gri || direction(vec1.direction_ratios);
        REPEAT i := 1 TO ndim;
          res.direction_ratios[i] := mag1*vec1.direction_ratios[i] -
                                      mag2*vec2.direction_ratios[i];
          mag := mag + (res.direction_ratios[i]*res.direction_ratios[i]);
        END_REPEAT;
        IF (mag &gt; 0.0 ) THEN
        result := dummy_gri || vector( res, SQRT(mag));
        ELSE
          result := dummy_gri || vector( vec1,  0.0);
        END_IF;
      END;
    END_IF;
    RETURN (result);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.vector_sum">FUNCTION <b>vector_sum</b></A><br>&nbsp;(arg1 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.vector_or_direction">vector_or_direction</A>; arg2 : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.vector_or_direction">vector_or_direction</A>) : <A HREF="#geometry_schema.vector">vector</A>;
         </code><pre>LOCAL
     result          : vector;
     res, vec1, vec2 : direction;
     mag, mag1, mag2 : REAL;
     ndim            : INTEGER;
   END_LOCAL;

   IF ((NOT EXISTS (arg1)) OR (NOT EXISTS (arg2))) OR (arg1.dim &lt;&gt; arg2.dim)
       THEN
     RETURN (?) ;

   ELSE
     BEGIN
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg1) THEN
         mag1 := arg1.magnitude;
         vec1 := arg1\vector.orientation;
       ELSE
         mag1 := 1.0;
         vec1 := arg1;
       END_IF;
       IF 'GEOMETRY_SCHEMA.VECTOR' IN TYPEOF(arg2) THEN
         mag2 := arg2.magnitude;
         vec2 := arg2\vector.orientation;
       ELSE
         mag2 := 1.0;
         vec2 := arg2;
       END_IF;
       vec1 := normalise (vec1);
       vec2 := normalise (vec2);
       ndim := SIZEOF(vec1.direction_ratios);
       mag := 0.0;
       res := dummy_gri || direction(vec1.direction_ratios);
       REPEAT i := 1 TO ndim;
         res.direction_ratios[i] := mag1*vec1.direction_ratios[i] +
                                      mag2*vec2.direction_ratios[i];
         mag := mag + (res.direction_ratios[i]*res.direction_ratios[i]);
       END_REPEAT;
       IF (mag &gt; 0.0 ) THEN
       result := dummy_gri || vector( res, SQRT(mag));
       ELSE
         result := dummy_gri || vector( vec1,  0.0);
       END_IF;
     END;
   END_IF;
   RETURN (result);</pre><code>
         END_FUNCTION;
         </code><br><code><br><A NAME="geometry_schema.volume_weights_positive">FUNCTION <b>volume_weights_positive</b></A><br>&nbsp;(b : <A HREF="../../../data/resources/geometry_schema/geometry_schema.htm#geometry_schema.rational_b_spline_volume">rational_b_spline_volume</A>) : BOOLEAN;
         </code><pre>LOCAL
       result   : BOOLEAN := TRUE;
     END_LOCAL;

     REPEAT i := 0 TO b.u_upper;
       REPEAT j := 0 TO b.v_upper;
         REPEAT k := 0 TO b.w_upper;
           IF (b.weights[i][j][k] &lt;= 0.0)  THEN
             result := FALSE;
             RETURN(result);
           END_IF;
         END_REPEAT;
       END_REPEAT;
     END_REPEAT;
     RETURN(result);</pre><code>
         END_FUNCTION;
         </code><br><code><br>
         END_SCHEMA;&nbsp;&nbsp;--&nbsp;geometry_schema<br></code></body>
</HTML>