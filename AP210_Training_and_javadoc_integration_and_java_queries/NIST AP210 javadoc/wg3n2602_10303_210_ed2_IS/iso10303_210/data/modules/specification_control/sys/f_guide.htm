
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML>
   <HEAD>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   
      <link rel="schema.DC" href="http://www.dublincore.org/documents/2003/02/04/dces/">
      <META name="DC.Title" content="Product data representation and exchange: Application module: Specification control">
      <META name="DC.Dates" content="2009-06-11 09:31:16">
      <META name="DC.Published" content="2009-07-01">
      <META name="DC.Contributor" content="Nettles, Darla">
      <META name="DC.Creator" content="Frechette, Simon">
      <META name="DC.Description" content="The application module Specification control">
      <META name="DC.Subject" content="module, diversity, diversity management, product variant, product family">
      <META name="DC.Identifier" content="ISO TC184/SC4/WG12 N6672">
      <META name="DC.Replaces" content="ISO TC184/SC4/WG12 N5499">
      <META name="SC4.version" content="3">
      <META name="SC4.checklist.internal_review" content="ISO TC184/SC4/WG12 N6563">
      <META name="SC4.checklist.project_leader" content="ISO TC184/SC4/WG12 N6564">
      <META name="SC4.checklist.convener" content="ISO TC184/SC4/WG12 N6565">
      <META name="STEPMOD.module.rcs.date" content="Date: 2009-06-11 09:31:16">
      <META name="STEPMOD.module.rcs.revision" content="Revision: 1.31">
      <META name="PART1000.module.rcs.revision" content="$Revision: $">
      <META name="PART1000.module.rcs.date" content="$Date: $">
      <META name="STEPMOD.arm.rcs.revision" content="Revision: 1.19">
      <META name="STEPMOD.mim.rcs.revision" content="Revision: 1.12">
      <TITLE>ISO/TS 10303-1112:2009 Specification control</TITLE>
   </HEAD>
   <body>
      <TABLE cellspacing="0" border="0" width="100%">
         <TR>
            <TD><small></small></TD>
         </TR>
         <TR>
            <TD valign="MIDDLE"><B>
                  Application module:
                  Specification control</B></TD>
            <TD valign="MIDDLE" align="RIGHT"><b>ISO/TS 10303-1112:2009(E) <br>
                  &copy; ISO
                  </b></TD>
         </TR>
      </TABLE>
      <TABLE border="1" cellspacing="1" width="100%">
         <TR>
            <TD valign="TOP">
               <p class="toc"><A HREF="../sys/cover.htm">Cover page</A><BR><A HREF="../sys/contents.htm">Table of contents</A><BR><A HREF="../sys/cover.htm#copyright">Copyright</A><BR><A HREF="../sys/foreword.htm">Foreword</A><BR><A HREF="../sys/introduction.htm">Introduction</A><BR><A HREF="../sys/1_scope.htm">1 Scope</A><BR><A HREF="../sys/2_refs.htm">2 Normative references</A><BR><A HREF="../sys/3_defs.htm">
                     
                     3 Terms, definitions and abbreviations
                     </A></p>
            </TD>
            <TD valign="TOP">
               <p class="toc"><A HREF="../sys/4_info_reqs.htm">4 Information requirements</A><BR><small>          
                     &nbsp; &nbsp;<A HREF="../sys/4_info_reqs.htm#interfaces">4.1 Required AM ARMs</A><BR>
                     &nbsp; &nbsp;<A HREF="../sys/4_info_reqs.htm#types">4.2 ARM type definitions</A><BR>
                     &nbsp; &nbsp;<A HREF="../sys/4_info_reqs.htm#entities">4.3 ARM entity definitions</A><BR>
                     &nbsp; &nbsp;<A HREF="../sys/4_info_reqs.htm#functions">4.4 ARM function definition</A><BR></small><A HREF="../sys/5_main.htm">5 Module interpreted model</A><BR><small>
                     &nbsp; &nbsp;<A HREF="../sys/5_mapping.htm#mapping">5.1 Mapping specification</A><BR>
                     &nbsp; &nbsp;<A HREF="../sys/5_mim.htm#mim_express">5.2 MIM EXPRESS short listing</A><BR>
                     &nbsp; &nbsp; &nbsp;<A HREF="../sys/5_mim.htm#types">5.2.1 MIM type definitions</A><BR>
                     &nbsp; &nbsp; &nbsp;<A HREF="../sys/5_mim.htm#entities">5.2.2 MIM entity definitions</A><BR>
                     &nbsp; &nbsp; &nbsp;<A HREF="../sys/5_mim.htm#rules">5.2.3 MIM rule definitions</A><BR></small></p>
            </TD>
            <TD valign="TOP">
               <p class="toc"><A HREF="../sys/a_short_names.htm">A MIM short names</A><BR><A HREF="../sys/b_obj_reg.htm">B Information object
                     registration</A><BR><A HREF="../sys/c_arm_expg.htm">
                     C ARM EXPRESS-G
                     </A>
                  &nbsp;&nbsp;<a href="../armexpg1.htm"><img align="middle" border="0" alt="EXPRESS-G" src="../../../../images/expg.gif"></a><br><A HREF="../sys/d_mim_expg.htm">
                     D MIM EXPRESS-G
                     </A>
                  &nbsp;&nbsp;<a href="../mimexpg1.htm"><img align="middle" border="0" alt="EXPRESS-G" src="../../../../images/expg.gif"></a><BR><A HREF="../sys/e_exp.htm">E Computer interpretable listings</A><BR><A HREF="../sys/f_guide.htm">
                     F Application module implementation and usage guide</A><BR><A HREF="../sys/biblio.htm#bibliography">Bibliography</A><BR><A HREF="../sys/modindex.htm">Index</A><BR></p>
            </TD>
         </TR>
      </TABLE>
      <div align="center">
         <h2><A NAME="annexf">Annex F</A><br>
            (informative)<br><br>Application module implementation and usage guide
         </h2>
      </div>
      <p class="example"><small><a name="example_1">EXAMPLE&nbsp;1</a>&nbsp;&nbsp;
            Examples for automotive products are passenger cars, trucks, busses, engines, or components of these products.
            </small></p>
      <p class="example"><small><a name="example_2">EXAMPLE&nbsp;2</a>&nbsp;&nbsp;
            
            Examples for furniture products are sofas, wardrobes, kitchens, or components of these products.
            </small></p><br><br><a name="figure_f1"></a><div align="center"><IMG src="../fig_81.gif" border="0" alt="Figure F.1&nbsp;&#8212;&nbsp;&nbsp;Main concepts of specification control"></div><br><div align="center"><b>Figure F.1&nbsp;&#8212;&nbsp;&nbsp;Main concepts of specification control</b></div><br><ul>
         			
         <li>
            				<b>product_class</b> is used to identify a set of similar products to be offered to the market; 
            A product_class is a product_concept and a characterized_object. 
            The characterized_object may have property_definition entities associated to it through property_definition.definition and
            the select type characterized_definition.
            
            <p>The instances of product_class may build a hierarchical tree-like structure through instances of product_concept_relationship
               that have the attribute name set to 'hierarchy' and that reference with the attribute related_product_concept the product_class
               that is a subclass of the product_class referenced by the attribute relating_product_concept.
               
            </p>
            				
            <p class="note"><small><a name="note_1">NOTE&nbsp;1</a>&nbsp;&nbsp;
                  
                  Since the market context information is not needed from an ARM perspective or would be represented using an particular product_concept_feature,
                  
                  the mandatory attribute market_context points to an entity product_concept_context with:
                  
                  <dl>
                     						
                     <dt>- attribute market_segment_type ='/NULL'
                        
                     </dt>
                     						
                     <dt> 
                        - inherited attribute application_context_element.name = '/NULL' 
                        
                     </dt>
                     					
                  </dl>
                  				</small></p>
            			
         </li>
         			
         <li>
            				<b>product_concept_feature</b> is used to describe a characteristic of the products within a product_class. 
            
            <p>The product_concept_feature is associated to a product_class through a product_concept_feature_association with the attribute
               name set to 'replaceable standard', 'non replaceable standard', 'availability', 'identification', 'option', 'part usage',
               or any other non standardized value.
               
               For a definition of the meaning of the standardized values, see ARM definition of Class_specification_association. 
               
            </p>
            				<b>package_product_concept_feature</b> is a subtype of product_concept_feature that is used when the characteristic is in fact a set of other characteristics, for
            example a package of several options for a passenger car. 
            In this case, there is an inclusion_product_concept_feature, a subtype of conditional_concept_feature, with the inherited
            attribute condition referencing a concept_feature_relationship_with_condition with the attribute conditional_operator set
            to 'implication'. 
            The inherited attribute relating_product_concept_feature of the concept_feature_relationship_with_condition references the
            package_product_concept_feature, and the inherited attribute related_product_concept_feature references either the one product_concept_feature
            that belongs to the package or another conditional_concept_feature that references the product_concept_feature instances of
            the package through an 'and' operation.
            Figure F.2 provides an example of package with two product_concept_feature.
               <br><br><a name="figure_f2"></a><div align="center"><IMG src="../fig_82.gif" border="0" alt="Figure F.2&nbsp;&#8212;&nbsp;&nbsp;Package of two specifications"></div><br><div align="center"><b>Figure F.2&nbsp;&#8212;&nbsp;&nbsp;Package of two specifications</b></div><br>
            			
         </li>
         			
         <li>
            				<b>product_concept_feature_category</b> is used to group similar instances of product_concept_feature, like the different outside colour characteristics of the products.
            
            A product_concept_feature_category is a group of instances of product_concept_feature. 
            Instances of product_concept_feature are assigned to their product_concept_feature_category through an instance of applied_group_assignment.
            
            For this group_assignment, the attribute items references, through the select type group_item, instances of product_concept_feature
            or package_product_concept_feature, the attribute assigned_group references product_concept_feature_category or exclusive_product_concept_feature_category,
            the attribute role references object_role with the attribute name set to 'specification category member'.
            
            
            <p>exclusive_product_concept_feature_category is a subtype of product_concept_feature_category that is used when the members
               of the group are mutually exclusive in their usage within a product.
               
            </p>
            				
            <p class="example"><small><a name="example_3">EXAMPLE&nbsp;3</a>&nbsp;&nbsp;
                  An exclusive_product_concept_feature_category would be used if there is exactly one outside colour that can be chosen for
                  a particular product. 
                  </small></p>
            				
            <p>
               
               product_concept_feature_category is associated to product_class through product_concept_feature_category_usage that is subtype
               of group_assignment. 
               For this group_assignment the attribute items references, through the select type category_usage_item, an instance of product_class,
               the attribute assigned_group references product_concept_feature_category or exclusive_product_concept_feature_category, the
               attribute role references object_role with the attribute name set to 'mandatory category usage' or 'optional category usage'.
               For a definition of the meaning of the two values, see ARM definition of Class_category_association.
               
            </p>
            			
         </li>
         			
         <li>
            				<b>conditional_concept_feature</b> is used to control the usage of a product classified as 'part' or 'tool' (by product_related_product_category) within the
            products of a product_class and to represent global conditions for instances of a product_class. 
            The conditional_concept_feature is subtype of product_concept_feature.
            
            
            <p>The conditional_concept_feature is used to build up boolean conditions for instances of product_concept_feature. 
               The conditional_concept_feature references with its attribute condition a concept_feature_relationship_with_condition that
               represents a binary boolean operation. 
               A concept_feature_relationship_with_condition is subtype of concept_feature_relationship with the attribute conditional_operator
               pointing to a concept_feature_operator with the attribute name set to 'and', 'or', 'oneof', 'not', or 'implication'. 
               The intended usage of the unary 'not' operation is that the inherited attributes relating_product_concept_feature and related_product_concept_feature
               reference the same instance of product_concept_feature.
               The value 'implication' is only allowed, if the inclusion_product_concept_feature subtype of conditional_concept_feature is
               used. 
               This is ensured by the rule restrict_concept_feature_operator. 
               
            </p>
            For a definition of the meaning of the other values, see ARM definition of Specification_expression.
            
            
            <p>conditional_concept_feature may be associated to a product_class through product_concept_feature_association with the attribute
               name set to 'part usage', 'identification', 'validity', 'design case', or any other non standardized value. 
               For a definition of the meaning of the standardized values, see ARM definition of Class_condition_association. 
               
            </p>
            				
            <p>The value 'part usage', which is also applicable for the association of a product_concept_feature to a product_class, see
               above, indicates that the conditional_concept_feature (or product_concept_feature) controls the usage of a part within a product
               of the associated product_class.
               In this case, the product_concept_feature_association is referenced by a configured_effectivity_context_assignment that is
               a subtype of effectivity_context_assignment through the select type configured_effectivity_context_item.
               
            </p>
            			
         </li>
         			
         <li>
            				<b>product_definition</b> that has a product_definition_context with the inherited attribute name set to 'functional definition'.
            It is used to describe the functional requirements for the products or the components of the products of a product_class.
            
            
            <p>Such instances of product_definition for functional requirements may be related to instances of product_class through an instance
               of configuration_design and configuration_item. 
               In this case the attribute name of configuration_design is set to 'functionality'. 
               For a definition of the meaning of the standardized value, see ARM definition of Class_breakdown_association.
               
            </p>
            			
         </li>
         			
         <li>
            				<b>product_definition</b> that has a product_definition_context with the inherited attribute name set to 'conceptual definition'.
            It is used to describe the common decomposition structure of all products of a product_class.
            
            <p>Such instances of product_definition for a common decomposition structure may be related to instances of product_class through
               an instance of configuration_design and configuration_item. 
               In this case the attribute name of configuration_design is set to 'realization'.
               For a definition of the meaning of the standardized value, see ARM definition of Class_breakdown_association.
               
            </p>
            			
         </li>
         			
         <li>
            				<b>product_definition</b> that has a product_definition_context with the inherited attribute name set to 'alternative definition'.
            It is used to describe a variant in the realization of a product_definition with context 'functional definition' or 'conceptual
            definition'. 
            
            <p>An instance of product_definition with context 'alternative definition' shall be associated to another product definition
               where it is a variant of through an instance of product_definition_relationship with the attribute name set to 'solution alternative
               definition'. 
               The related_product_definition points to the variant (with context 'alternative definition') and the relating_product_definition
               references a product_definition with context 'functional definition', 'conceptual definition', or 'alternative definition'.
               
               In the latter case, the product_definition instance with context 'alternative solution' defines a variant of another instance
               of product_definition with context 'alternative solution', for example, where the first level defines technically different
               solutions and the second level defines different suppliers for the same technical solution.
               
            </p>
            				
            <p>All instances of product_definition with context 'alternative definition' that are defined through this path as variant of
               the same instance of product_definition are the mutually exclusive variants.
               
            </p>
            			
         </li>
         			
         <li>
            				<b>product_definition</b> that has a product_definition_context with the inherited attribute name set to 'part occurrence'.
            It is used to identify an occurrence of a component in an assembly structure, for example, to identify the component occurrences
            of a product_definition with context 'alternative definition'. 
            A product_definition with context 'part occurrence' defines exactly one occurrence of a part within a given assembly structure.
            
            
            <p>An instance of product_definition with context 'part occurrence' may be defined as an element (as related_product_definition),
               of a product_definition instance with context 'alternative solution' (as relating_product_definition), through a product_defininition_relationship
               with the attribute name set to 'realization'.
               
            </p>
            				
            <p>A product_definition with context 'part occurrence' may also represent a component occurrence in an explicit product structure
               defined by assembly_component_usage.
               In this case it is linked to the assembly_component_usage by a product_definition_occurrence_relationship.
               
            </p>
            			
         </li>
         			
         <li>
            				<b>product_definition_usage</b> with the attribute name set to 'decomposition', 'occurrence', 'realization', 'functionality', or 'specialization' is used
            to define the structure for product_definition instances with context 'functional definition', 'conceptual definition', or
            'alternative definition' as relating_product_definition. 
            The related_product_definition is an instance of product_definition with context 'functional definition', 'conceptual definition',
            or 'part occurrence'. 
            
            <p>With this tree-like decomposition structures for product_definition instances with the same context, attribute name set to
               'decomposition', 'specialization', or 'occurrence' as well as relationships between product_definition_instances with different
               context, attribute name set to 'realization' or 'functionality', can be defined. 
               For a detailed definition of the meaning of the standardized values for the attribute name of product_definition_relationship,
               see ARM definition of Breakdown_node_relationship.
               
            </p>
            			
         </li>
         			
         <li>
            				<b>configured_effectivity_context_assignment</b> and <b>configured_effectivity_assignment</b> are used to link a product_definition instance with context 'part occurrence', 'alternative definition', 'conceptual definition',
            or 'functional definition' with the condition under which it is used or designed.
            The configured_effectivity_context_assignment is a subtype of effectivity_context_assignment that references with its attribute
            items, through the select type configured_effectivity_context_item, the product_concept_feature_association that defines the
            usage case or condition. 
            The inherited attribute assigned_effectivity_assignment references the configured_effectivity_assignment instance.
            
            
            <p>configured_effectivity_assignment is a subtype of effectivity_assignment that references with its attribute items, through
               the select type configured_effectivity_item, the product_definition with context 'part occurrence', 'alternative definition',
               'conceptual definition', or 'functional definition' to which the usage case or condition applies. 
               The attribute role references an object_role instance with the attribute name set to 'design' or 'usage' and with the attribute
               description set to 'inherited', 'local', or 'exception'. 
               For a definition of the meaning of the standardized values for the name attribute and for the description attribute, see ARM
               definition of Configuration.
               
            </p>
            				
            <p>configured_effectivity_assignment references with its inherited attribute assigned_effectivity an instance of effectivity
               with an id of 'configuration validity' to indicate the valid use of the item contained in the items attribute. dated_effectivity
               or time_interval_based_effectivity instances may additionally be assigned to a configured_effectivity_assignment through applied_effectivity_assignment
               instances to indicate the time range for which the configuration is valid.
               
            </p>
            			
         </li>
         			
         <li>
            				<b>product_identification</b> and <b>product_specification</b> are used to identify a potentially manufacturable product selected among a product_class by its specific characteristics
            (product_concept_feature instances), for example, a customer order for a passenger car. 
            Both these entities are subtypes of configuration_item.
            They reference with their inherited attribute item_concept, the product_class of the manufacturable product. 
            The attribute item_concept_feature of product_specification points to a set of product_concept_feature_association instances
            that define the specified characteristics of the manufacturable product.
            
         </li>
         		
      </ul><br><br><p>&copy; ISO 2009 &#8212; All rights reserved</p>
   </body>
</HTML>