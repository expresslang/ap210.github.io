
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML>
   <HEAD>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   
      <link rel="schema.DC" href="http://www.dublincore.org/documents/2003/02/04/dces/">
      <META name="DC.Title" content="Product data representation and exchange: Application module: Item definition structure">
      <META name="DC.Dates" content="2009-04-30 12:15:44">
      <META name="DC.Published" content="2009-07-01">
      <META name="DC.Contributor" content="Nettles, Darla">
      <META name="DC.Creator" content="Frechette, Simon">
      <META name="DC.Description" content="The application module Item definition structure">
      <META name="DC.Subject" content="module, assembly structure, component placement">
      <META name="DC.Identifier" content="ISO TC184/SC4/WG12 N6239">
      <META name="DC.Replaces" content="ISO TC184/SC4/WG12 N5409">
      <META name="SC4.version" content="4">
      <META name="SC4.checklist.internal_review" content="ISO TC184/SC4/WG12 N6563">
      <META name="SC4.checklist.project_leader" content="ISO TC184/SC4/WG12 N6564">
      <META name="SC4.checklist.convener" content="ISO TC184/SC4/WG12 N6565">
      <META name="STEPMOD.module.rcs.date" content="Date: 2009-04-30 12:15:44">
      <META name="STEPMOD.module.rcs.revision" content="Revision: 1.43">
      <META name="PART1000.module.rcs.revision" content="$Revision: $">
      <META name="PART1000.module.rcs.date" content="$Date: $">
      <META name="STEPMOD.arm.rcs.revision" content="Revision: 1.17">
      <META name="STEPMOD.mim.rcs.revision" content="Revision: 1.11">
      <TITLE>ISO/TS 10303-1345:2009 Item definition structure</TITLE>
   </HEAD>
   <body>
      <TABLE cellspacing="0" border="0" width="100%">
         <TR>
            <TD><small></small></TD>
         </TR>
         <TR>
            <TD valign="MIDDLE"><B>
                  Application module:
                  Item definition structure</B></TD>
            <TD valign="MIDDLE" align="RIGHT"><b>ISO/TS 10303-1345:2009(E) <br>
                  &copy; ISO
                  </b></TD>
         </TR>
      </TABLE>
      <TABLE border="1" cellspacing="1" width="100%">
         <TR>
            <TD valign="TOP">
               <p class="toc"><A HREF="../sys/cover.htm">Cover page</A><BR><A HREF="../sys/contents.htm">Table of contents</A><BR><A HREF="../sys/cover.htm#copyright">Copyright</A><BR><A HREF="../sys/foreword.htm">Foreword</A><BR><A HREF="../sys/introduction.htm">Introduction</A><BR><A HREF="../sys/1_scope.htm">1 Scope</A><BR><A HREF="../sys/2_refs.htm">2 Normative references</A><BR><A HREF="../sys/3_defs.htm">
                     
                     3 Terms, definitions and abbreviations
                     </A></p>
            </TD>
            <TD valign="TOP">
               <p class="toc"><A HREF="../sys/4_info_reqs.htm">4 Information requirements</A><BR><small>          
                     &nbsp; &nbsp;<A HREF="../sys/4_info_reqs.htm#interfaces">4.1 Required AM ARMs</A><BR>
                     &nbsp; &nbsp;<A HREF="../sys/4_info_reqs.htm#types">4.2 ARM type definition</A><BR>
                     &nbsp; &nbsp;<A HREF="../sys/4_info_reqs.htm#entities">4.3 ARM entity definitions</A><BR>
                     &nbsp; &nbsp;<A HREF="../sys/4_info_reqs.htm#rules">4.4 ARM rule definitions</A><BR></small><A HREF="../sys/5_main.htm">5 Module interpreted model</A><BR><small>
                     &nbsp; &nbsp;<A HREF="../sys/5_mapping.htm#mapping">5.1 Mapping specification</A><BR>
                     &nbsp; &nbsp;<A HREF="../sys/5_mim.htm#mim_express">5.2 MIM EXPRESS short listing</A><BR>
                     &nbsp; &nbsp; &nbsp;<A HREF="../sys/5_mim.htm#types">5.2.1 MIM type definition</A><BR>
                     &nbsp; &nbsp; &nbsp;<A HREF="../sys/5_mim.htm#rules">5.2.2 MIM rule definitions</A><BR></small></p>
            </TD>
            <TD valign="TOP">
               <p class="toc"><A HREF="../sys/a_short_names.htm">A MIM short names</A><BR><A HREF="../sys/b_obj_reg.htm">B Information object
                     registration</A><BR><A HREF="../sys/c_arm_expg.htm">
                     C ARM EXPRESS-G
                     </A>
                  &nbsp;&nbsp;<a href="../armexpg1.htm"><img align="middle" border="0" alt="EXPRESS-G" src="../../../../images/expg.gif"></a><br><A HREF="../sys/d_mim_expg.htm">
                     D MIM EXPRESS-G
                     </A>
                  &nbsp;&nbsp;<a href="../mimexpg1.htm"><img align="middle" border="0" alt="EXPRESS-G" src="../../../../images/expg.gif"></a><BR><A HREF="../sys/e_exp.htm">E Computer interpretable listings</A><BR><A HREF="../sys/f_guide.htm">
                     F Application module implementation and usage guide</A><BR><A HREF="../sys/biblio.htm#bibliography">Bibliography</A><BR><A HREF="../sys/modindex.htm">Index</A><BR></p>
            </TD>
         </TR>
      </TABLE>
      <div align="center">
         <h2><A NAME="annexf">Annex F</A><br>
            (informative)<br><br>Application module implementation and usage guide
         </h2>
      </div><A name="Product structure">
         <h2>F.1 Product structure</h2></A><p>A product_definition that has a product_definition_context with the attribute name set to 'part definition' represents a definitional
         view on the part, collecting data, from a particular application domain or life-cycle, about the part independently of its
         usage, as constituent of some other part.  Relationships between product_definitions that have an associated product_definition_context
         with a name of 'part definition' are the principle elements used to define explicit hierarchical product structures. 
      </p>
      <p>An assembly_component_usage relationship represents the general assembly relationship between two parts by associating two
         product_definitions. The related_product_definition defines a view on the component, the relating_product_definition defines
         a view of the assembly part. Both product_definitions are definitional views. They have an associated product_definition_context
         with a name of 'part definition'.  In order to define different types of assembly relationships, assembly_component_usage
         has various subtypes:  
      </p>
      <ul>
         				
         <li>The next_assembly_usage_occurrence relationship represents a specific usage. It is an occurrence of a component definition
            in the next higher parent assembly.  If a next_assembly_usage_occurrence is not instantiated in combination with a quantified_assembly_component_usage,
            it is used to represent a single occurrence of the component part in the context of the immediate next higher assembly part.
            
         </li>
         				
         <li>The promissory_usage_occurrence relationship represents the usage of a component within a higher-level assembly that must
            not be the immediate parent, in the case where the detailed assembly structure between the component and the higher-level
            assembly is not represented. It specifies the intention to use the constituent in an assembly.  A promissory_usage_occurrence
            may be instantiated in combination with a quantified_assembly_component_usage. 
         </li>
         				
         <li>The quantified_assembly_component_usage relationship is an assembly_component_usage that associates a quantity with the component
            usage. It can be used to describe that a component is used multiple times. 
            				
            <p class="example"><small><a name="example_1">EXAMPLE&nbsp;1</a>&nbsp;&nbsp;
                  Quantity is set to '5 each' for five wheel fixture bolts, in the context of the assembly, but does not allow independent identification
                  of individual occurrences of this component usage.</small></p>
            				 Another usage of the quantity is for material like components. 
            				 
            <p class="example"><small><a name="example_2">EXAMPLE&nbsp;2</a>&nbsp;&nbsp;
                  '0.5 ml' of oil.</small></p>  If the quantity, in which the component part is used in the assembly can not be expressed as a particular value, but depends
            on certain constraints, an assembly_component_usage relationship with a name of 'selected instance usage' shall be used instead
            of the quantified_assembly_component_usage subtype with an associated property_definition and an associated representation
            with a name of 'selection criteria' that defines the quantity by a representation_item with name 'selection quantity' of type
            measure_representation_item or value_range. 
         </li>
         				
         <li>In order to identify a specific occurrence of a component in an assembly which is not the immediate parent assembly, the specified_higher_usage_occurrence
            entity is used, because the path from the higher-level parent assembly to the lower-level component may be ambigous. The specified_higher_usage_occurrence
            relationship represents an individual occurrence of the component part within a higher-level parent assembly. It shall not
            be instantiated in combination with a next_assembly_usage_occurrence or a promissory_usage_occurrence.  The specified_higher_usage_occurrence
            identifies with its inherited attribute related_product_definition the component in the assembly structure, with its inherited
            attribute relating_product_definition the higher-level parent assembly, with the next_usage attribute the component usage
            within the immediate parent assembly, and with its upper_usage attribute the usage between the higher-level parent assembly
            and the immediate parent identified by next_usage.  In case the higher-level parent assembly to the component has more than
            one intermediate assembly level the upper_usage attribute refers to another specified_higher_usage_occurrence (recursive use).
             Figure F.1 shows an example instantiation.    <br><br><a name="figure_f1"></a><div align="center"><IMG src="../fig_79.gif" border="0" alt="Figure F.1&nbsp;&#8212;&nbsp;&nbsp;Instanciation of specified_higher_usage_occurrence"></div><br><div align="center"><b>Figure F.1&nbsp;&#8212;&nbsp;&nbsp;Instanciation of specified_higher_usage_occurrence</b></div><br>
            				
         </li>
         			
      </ul>
      <p>Figure F.2 shows an example instantiation. </p><br><br><a name="figure_f2"></a><div align="center"><IMG src="../fig_80.gif" border="0" alt="Figure F.2&nbsp;&#8212;&nbsp;&nbsp;Instanciation of product_definition_occurrence_relationship"></div><br><div align="center"><b>Figure F.2&nbsp;&#8212;&nbsp;&nbsp;Instanciation of product_definition_occurrence_relationship</b></div><br><p>See Specification control module for further details about the usage of those product_definitions for specification control.
         
      </p><A name="Shape of an assembly">
         <h2>F.2 Shape of an assembly</h2></A><A name="Relating the shape of a component to the shape of its assembly">
         <h4>F.2.1 Relating the shape of a component to the shape of its assembly</h4></A> In order to build assembly structures, relationships between the assembly and component(s) have to be defined. Two alternatives
      for the implementation of assembly structure representations are recommended:   
      <ul>
         					
         <li>one alternative describes the assembly with the shape of the components built in.  With this approach the shape of the component
            is mapped into the shape of the assembly via mapped_item;  
         </li>
         					
         <li>the other alternative describes the components and the assembly with their own shape information together with the transformation
            information between the assembly and the component. This approach uses the representation_relationship_with_transformation.
             
         </li>
         				
      </ul>Both mechanisms make sense even in mixed combinations.  The product structure relationship, such as next_assembly_usage_occurrence,
      is identical and is required for both approaches. <A name="mapped_item approach">
         <h4>F.2.2 mapped_item approach</h4></A> This approach represents the assembled model completely.  It is appropriate for explicit representation of assemblies.  It
      uses mapped_item in combination with representation_map which takes the shape_representation of the component and turns it
      into an item in a representation item included the shape_representation of the assembly.  The transformation to be applied
      is determined from the mapping origin and the mapping target, which are items of the two instances of representation and therefore
      founded in the two contexts.  
      <p>The entity mapped_item is constrained such that: </p>
      				
      <ul>
         					
         <li>no mapped_item shall be dependent on itself to define the representation being mapped (acyclic);  </li>
         					
         <li>the mapping_origin shall be in the context of the representation referenced by mapped_item.mapping_source.mapped_representation;
             
         </li>
         					
         <li>the mapping_target shall be in the context of the representation including the mapped_item.  </li>
         				
      </ul> There is no constraint to prevent both instances of representation having the same context: the new item is shifted in position
      but may not change spaces.  This allows the use of mapped_item to position sub-models in a single coordinate space.  
      <p>It is even possible to define an identity matrix transformation by referring to the same entity instance as both mapping_origin
         and mapping_target.  This represents the case where a component is defined in (one of) its final positions.  Until it is mapped
         into the second representation, it is not included in the representation even though defined in the same space. 
      </p>
      				
      <p>The mapping of the Assembly_component_relationship implies that the relationships between the assembly and the component on
         the product_definition level and the mapped_item for the shape_representation level have to be linked through an additional
         separate shape_representation containing, only the mapped_itemand a shape_definition_representation and a product_definition_shape.
         This is necessary to distinguish between several occurrences of the same component within an assembly. 
      </p>
      			<A name="representation_relationship_with_transformation approach">
         <h4>F.2.3 representation_relationship_with_transformation approach</h4></A> This approach represents the components and the set of instructions how to build the assembly.  This approach is adequate
      for the implicit representation of assemblies.  Thus, representation_relationship_with_transformation is used to define the
      relative positions within an assembly.  It does not allow for:   
      <ul>
         					
         <li>inclusion: The decision to create a representation that brings all the components together, is left to the receiving system;
             
         </li>
         					
         <li>the ability to define a component in one position and then to replicate it in the same space.  </li>
         				
      </ul> The shape_representation may be defined explicitly and completely for the assembly and the representation_relationship_with_transformation
      gives just the additional information how an instance of shape_representation for a component geometrically relates to the
      shape of the assembly. The rule coordinated_assembly_and_shape implies that the relationships between the assembly and the
      component on the product_definition level and the shape_representation level have to be linked through a context_dependent_shape_representation.
      This is necessary to distinguish between several occurrences of the same component within an assembly.  
      <p>According to ISO 10303-43, the attributes rep_1 and rep_2 of representation_relationship_with_transformation are determined
         as follows:  
      </p>
      				
      <ul>
         					
         <li>rep_1 is defined as the representation with a context to which the transformation applies;  </li>
         					
         <li>rep_2 is the representation with a context which is the result of the transformation.  </li>
         				
      </ul>Based on this definition, the attributes of representation_relationship_with_transformation should be instantiated as follows:
        
      <ul>
         					
         <li>rep_1 references the shape_representation for the product_definition that is the related_product_definition (identifying the
            component) of the assembly_component_usage;  
         </li>
         					
         <li>rep_2 references the shape_representation for the product_definition that is the relating_product_definition (identifying
            the assembly) of the assembly_component_usage.  
         </li>
         				
      </ul> Further restrictions are implied by the informal proposition on representation_relationship_with_transformation, defined
      in ISO 10303-43: If the transformation is an item_defined_transformation, the ordering of the instances of representation
      given for the inherited attributes of representation_relationship shall be consistent with the ordering of the two instances
      of representation_item given as attributes of item_defined_transformation.  Therefore the inherited attributes transform_item_1
      and transform_item_2 of item_defined_transformation shall be used as follows:   
      <ul>
         					
         <li>transform_item_1 references the representation_item, such as axis2_placement_3d, in a representation for the product_definition
            that is the related_product_definition of the assembly_component_usage, identifying the component;  
         </li>
         					
         <li>transform_item_2 references the representation_item, such as axis2_placement_3d, in a representation for the product_definition
            that is the relating_product_definition of the assembly_component_usage, identifying the assembly.  
         </li>
         				
      </ul>
      			<A name="Representation of transformations">
         <h4>F.2.4 Representation of transformations</h4></A> Transformation information is represented for an item_defined_transformation using the inherited attributes transform_item_2
      and transform_item_1, and for a mapped_item using attribute mapping_target of mapped_item and attribute mapping_origin of
      the referenced representation_map as a combination of two instances of representation_item.  
      <p>The allowed combinations for these two instances of representation_item are as follows:  </p>
      				
      <ul>
         					
         <li>axis2_placement_3d for the transform_item_1 or mapping_origin attribute and another instance of axis2_placement_3d for the
            transform_item_2 or mapping_target attribute;  
         </li>
         					
         <li>axis2_placement_3d for the transform_item_1 or mapping_origin attribute and an instance of cartesian_transformation_operator_3d
            for the transform_item_2 or mapping_target attribute;  
         </li>
         					
         <li>axis2_placement_2d for the transform_item_1 or mapping_origin attribute and another instance of axis2_placement_2d for the
            transform_item_2 or mapping_target attribute;  
         </li>
         					
         <li>axis2_placement_2d for the transform_item_1 or mapping_origin attribute and an instance of cartesian_transformation_operator_2d
            for the transform_item_2 or mapping_target attribute.  
         </li>
         				
      </ul> For a representation_relationship_with_transformation there may be also an instance of functionally_defined_transformation
      used that is a cartesian_transformation_operator.  For any usage of an instance of cartesian_transformation_operator to define
      the transformation information of an instance of assembly_component_usage the derived attribute scl shall be 1.0, since scaling
      is not allowed for components within an assembly. <br><br><p>&copy; ISO 2009 &#8212; All rights reserved</p>
   </body>
</HTML>